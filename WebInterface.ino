#include "WebInterface.h"
#include "Config.h"
#include "StepperControl.h"
#include "PlasmaControl.h"
#include "THC_System.h"
#include "FileManager.h"

WebServer WebInterface::server(80);
WebSocketsServer WebInterface::webSocket(81);

void WebInterface::init() {
    // –ó–∞–ø—É—Å–∫ WiFi
    WiFi.softAP(WIFI_SSID, WIFI_PASSWORD);
    Serial.printf("üì° WiFi AP started: %s\n", WiFi.softAPIP().toString().c_str());
    
    // –ú–∞—Ä—à—Ä—É—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤:
    server.on("/api/files/upload", HTTP_POST, []() {
        WebInterface::server.send(200, "text/plain", "Upload complete");
    }, WebInterface::handleFileUpload);
    
    server.on("/api/files/list", HTTP_GET, WebInterface::handleFileList);
    server.on("/api/files/delete", HTTP_POST, WebInterface::handleFileDelete);
    server.on("/api/files/run", HTTP_POST, WebInterface::handleFileRun);
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ HTTP –º–∞—Ä—à—Ä—É—Ç–æ–≤
    server.on("/", WebInterface::handleRoot);
    server.on("/api/status", WebInterface::handleAPIStatus);
    server.on("/api/files", WebInterface::handleAPIFiles);
    
    server.begin();
    
    // –ó–∞–ø—É—Å–∫ WebSocket
    webSocket.begin();
    webSocket.onEvent(WebInterface::handleWebSocket);
    
    Serial.println("‚úÖ Web Interface initialized");
}

void WebInterface::handleClient() {
    server.handleClient();
    webSocket.loop();
}

void WebInterface::handleRoot() {
    server.send(200, "text/html", getMainPage());
}

void WebInterface::handleAPIStatus() {
    DynamicJsonDocument doc(1024);
    doc["status"] = "ok";
    doc["version"] = "1.0.0";
    doc["uptime"] = millis() / 1000;
    doc["freeHeap"] = ESP.getFreeHeap();
    doc["wifiClients"] = WiFi.softAPgetStationNum();
    
    String response;
    serializeJson(doc, response);
    server.send(200, "application/json", response);
}

void WebInterface::handleAPIFiles() {
    auto files = FileManager::listFiles();
    DynamicJsonDocument doc(2048);
    JsonArray filesArray = doc.to<JsonArray>();
    
    for (const String& file : files) {
        filesArray.add(file);
    }
    
    String response;
    serializeJson(doc, response);
    server.send(200, "application/json", response);
}

// –†–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ—Ç–æ–¥–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
void WebInterface::handleFileUpload() {
    HTTPUpload& upload = server.upload();
    static File uploadFile;
    
    if(upload.status == UPLOAD_FILE_START) {
        String filename = "/" + upload.filename;
        uploadFile = SD_MMC.open(filename, FILE_WRITE);
        if(!uploadFile) {
            server.send(500, "text/plain", "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞");
            return;
        }
        Serial.println("üì§ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏: " + upload.filename);
    }
    else if(upload.status == UPLOAD_FILE_WRITE) {
        if(uploadFile) {
            uploadFile.write(upload.buf, upload.currentSize);
        }
    }
    else if(upload.status == UPLOAD_FILE_END) {
        if(uploadFile) {
            uploadFile.close();
            Serial.println("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: " + upload.filename);
            server.send(200, "text/plain", "–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: " + upload.filename);
        }
    }
}

void WebInterface::handleFileList() {
    auto files = FileManager::listFiles();
    
    DynamicJsonDocument doc(2048);
    JsonArray filesArray = doc.to<JsonArray>();
    
    for(const String& file : files) {
        filesArray.add(file);
    }
    
    String response;
    serializeJson(doc, response);
    server.send(200, "application/json", response);
}

void WebInterface::handleFileDelete() {
    String filename = server.arg("filename");
    if(FileManager::deleteFile(filename)) {
        server.send(200, "text/plain", "–§–∞–π–ª —É–¥–∞–ª–µ–Ω: " + filename);
    } else {
        server.send(500, "text/plain", "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞");
    }
}

void WebInterface::handleFileRun() {
    String filename = server.arg("filename");
    FileManager::runGCodeFile(filename);
    server.send(200, "text/plain", "–ó–∞–ø—É—Å–∫ —Ñ–∞–π–ª–∞: " + filename);
}

void WebInterface::handleWebSocket(uint8_t num, WStype_t type, uint8_t* payload, size_t length) {
    switch (type) {
        case WStype_DISCONNECTED:
            Serial.printf("[%u] WebSocket disconnected\n", num);
            break;
        case WStype_CONNECTED:
            {
                IPAddress ip = webSocket.remoteIP(num);
                Serial.printf("[%u] WebSocket connected from %d.%d.%d.%d\n", num, ip[0], ip[1], ip[2], ip[3]);
                sendSystemState();
            }
            break;
        case WStype_TEXT:
            {
                String message = String((char*)payload);
                processWebSocketCommand(message);
            }
            break;
    }
}

void WebInterface::sendSystemState() {
    DynamicJsonDocument doc(1024);
    
    doc["type"] = "status";
    doc["arcVoltage"] = PlasmaControl::getArcVoltage();
    doc["arcOK"] = PlasmaControl::isArcOK();
    doc["plasmaActive"] = PlasmaControl::isActive();
    doc["currentHeight"] = StepperControl::getCurrentZ();
    doc["targetVoltage"] = THC_System::getTargetVoltage();  // –¢–µ–ø–µ—Ä—å float
    doc["thcEnabled"] = THC_System::isEnabled();
    doc["thcActive"] = THC_System::isActive();
    doc["machineState"] = "Ready";
    doc["x"] = StepperControl::getCurrentX();
    doc["y"] = StepperControl::getCurrentY();
    doc["z"] = StepperControl::getCurrentZ();
    
    String jsonString;
    serializeJson(doc, jsonString);
    webSocket.broadcastTXT(jsonString);
}

void WebInterface::processWebSocketCommand(String message) {
    DynamicJsonDocument doc(1024);
    DeserializationError error = deserializeJson(doc, message);
    
    if (error) {
        Serial.print("JSON parsing failed: ");
        Serial.println(error.c_str());
        return;
    }
    
    String command = doc["command"];
    Serial.println("Received command: " + command);
    
    if (command == "plasma_on") {
        PlasmaControl::startPlasma();
    } else if (command == "plasma_off") {
        PlasmaControl::stopPlasma();
    } else if (command == "jog") {
        String direction = doc["direction"];
        float distance = doc["distance"];
        StepperControl::jog(direction, distance);
    } else if (command == "home_all") {
        StepperControl::homeAll();
    } else if (command == "emergency_stop") {
        Serial.println("üõë EMERGENCY STOP");
    } else if (command == "toggle_thc") {
        THC_System::toggle();
    } else if (command == "thc_settings") {
        float voltage = doc["voltage"];  // float!
        int deadZone = doc["deadZone"];
        float correctionRate = doc["correctionRate"];
        THC_System::setTargetVoltage(voltage);
        Serial.printf("‚öôÔ∏è THC settings: voltage=%.1f, deadZone=%d, correctionRate=%.2f\n", 
                     voltage, deadZone, correctionRate);
    }
    
    sendSystemState();
}

// –§—É–Ω–∫—Ü–∏—è getMainPage() —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º JavaScript
String WebInterface::getMainPage() {
    return R"rawliteral(
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>–ü–ª–∞–∑–º–µ–Ω–Ω—ã–π –ß–ü–£ - ESP32-S3</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        /* ... –≤–µ—Å—å CSS –∫–æ–¥ ... */
    </style>
</head>
<body>
    <div class="app-container">
        <!-- Header -->
        <header class="header">
            <div class="logo">
                <h1>‚ö° –ü–ª–∞–∑–º–µ–Ω–Ω—ã–π –ß–ü–£ –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä</h1>
                <span>ESP32-S3</span>
            </div>
            <div class="status-bar">
                <div class="status-item" id="connectionStatus">üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ</div>
                <div class="status-item" id="machineStatus">–ì–æ—Ç–æ–≤</div>
                <div class="status-item" id="thcStatus">THC: –í—ã–∫–ª</div>
                <div class="status-item" id="plasmaStatus">–ü–ª–∞–∑–º–∞: –í—ã–∫–ª</div>
            </div>
        </header>

        <!-- Main Content -->
        <div class="main-content">
            <!-- Monitoring Panel -->
            <div class="panel monitoring-panel">
                <h3>üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã</h3>
                <div class="monitor-grid">
                    <div class="monitor-item">
                        <div class="monitor-label">–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –¥—É–≥–∏</div>
                        <div class="monitor-value" id="arcVoltage">0.0 V</div>
                    </div>
                    <div class="monitor-item">
                        <div class="monitor-label">–¢–µ–∫—É—â–∞—è –≤—ã—Å–æ—Ç–∞</div>
                        <div class="monitor-value" id="currentHeight">0.00 mm</div>
                    </div>
                    <div class="monitor-item">
                        <div class="monitor-label">–¶–µ–ª–µ–≤–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ</div>
                        <div class="monitor-value" id="targetVoltage">140 V</div>
                    </div>
                    <div class="monitor-item">
                        <div class="monitor-label">–°—Ç–∞—Ç—É—Å –¥—É–≥–∏</div>
                        <div class="monitor-value" id="arcStatus">–ù–ï–¢</div>
                    </div>
                </div>
                
                <div class="position-display">
                    <div style="margin-bottom: 10px; color: #aaa;">–ü–æ–∑–∏—Ü–∏—è:</div>
                    <div style="display: flex; justify-content: space-between;">
                        <span>X: <span id="posX">0.0</span> mm</span>
                        <span>Y: <span id="posY">0.0</span> mm</span>
                        <span>Z: <span id="posZ">0.0</span> mm</span>
                    </div>
                </div>
            </div>

            <!-- Jog Control Panel -->
            <div class="panel jog-panel">
                <h3>üéÆ –†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</h3>
                
                <div class="jog-container">
                    <!-- XY Jog Grid -->
                    <div class="xy-jog-grid">
                        <button class="jog-btn btn-y-plus" onclick="jog('Y+')">Y+</button>
                        <button class="jog-btn btn-y-minus" onclick="jog('Y-')">Y-</button>
                        <button class="jog-btn btn-x-minus" onclick="jog('X-')">X-</button>
                        <div class="jog-btn btn-center">XY</div>
                        <button class="jog-btn btn-x-plus" onclick="jog('X+')">X+</button>
                    </div>
                    
                    <!-- Z Jog Grid -->
                    <div class="z-jog-grid">
                        <button class="jog-btn btn-z-plus" onclick="jog('Z+')">Z+</button>
                        <button class="jog-btn btn-z-minus" onclick="jog('Z-')">Z-</button>
                    </div>
                </div>
                
                <div class="control-buttons">
                    <button class="btn btn-success" onclick="plasmaOn()">M03 - –ü–ª–∞–∑–º–∞ –í–ö–õ</button>
                    <button class="btn btn-danger" onclick="plasmaOff()">M05 - –ü–ª–∞–∑–º–∞ –í–´–ö–õ</button>
                    <button class="btn btn-warning" onclick="homeAll()">üè† –ù—É–ª–µ–≤–∞–Ω–∏–µ –æ—Å–µ–π</button>
                    <button class="btn btn-danger" onclick="emergencyStop()">üõë –ê–≤–∞—Ä–∏–π–Ω—ã–π –°—Ç–æ–ø</button>
                </div>
            </div>

            <!-- THC Control Panel -->
            <div class="panel thc-panel">
                <h3>üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ THC</h3>
                
                <div class="slider-group">
                    <label>–¶–µ–ª–µ–≤–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ: <span class="slider-value" id="voltageValue">140</span> V</label>
                    <div class="slider-container">
                        <input type="range" id="voltageSlider" min="80" max="200" value="140" step="1">
                    </div>
                </div>
                
                <div class="slider-group">
                    <label>–ú–µ—Ä—Ç–≤–∞—è –∑–æ–Ω–∞: ¬±<span class="slider-value" id="deadZoneValue">5</span> V</label>
                    <div class="slider-container">
                        <input type="range" id="deadZoneSlider" min="1" max="20" value="5" step="1">
                    </div>
                </div>
                
                <div class="slider-group">
                    <label>–°–∫–æ—Ä–æ—Å—Ç—å –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏: <span class="slider-value" id="correctionValue">0.10</span> mm/s</label>
                    <div class="slider-container">
                        <input type="range" id="correctionSlider" min="0.01" max="0.5" value="0.1" step="0.01">
                    </div>
                </div>
                
                <div style="display: flex; gap: 10px; margin: 15px 0;">
                    <button class="btn btn-success" id="thcToggle" onclick="toggleTHC()">THC –í–∫–ª</button>
                    <button class="btn" onclick="saveTHCSettings()">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                </div>
                
                <div style="background: #333; padding: 10px; border-radius: 5px; margin-top: 10px;">
                    <div style="font-size: 0.9em; color: #aaa;">–°—Ç–∞—Ç—É—Å THC:</div>
                    <div id="thcActiveStatus" style="color: #f44336;">–ù–µ –∞–∫—Ç–∏–≤–Ω–æ</div>
                </div>
            </div>

            <!-- Files Panel -->
            <div class="panel files-panel">
                <h3>üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏</h3>
                
                <div class="file-upload-section">
                    <input type="file" id="fileInput" accept=".nc,.gcode,.txt" 
                           style="margin-bottom: 10px; width: 100%;">
                    <button class="btn" onclick="uploadFile()" style="width: 100%;">
                        üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ SD –∫–∞—Ä—Ç—É
                    </button>
                </div>
                
                <div class="file-list" id="fileList" 
                     style="max-height: 200px; overflow-y: auto; background: #333; 
                            border-radius: 5px; padding: 10px; margin: 10px 0;">
                    <!-- –§–∞–π–ª—ã –±—É–¥—É—Ç –∑–¥–µ—Å—å -->
                </div>
                
                <div class="file-controls">
                    <button class="btn btn-success" onclick="runSelectedFile()" 
                            style="margin-right: 10px;">
                        ‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π
                    </button>
                    <button class="btn btn-danger" onclick="deleteSelectedFile()">
                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π
                    </button>
                </div>
                
                <div id="selectedFileInfo" style="margin-top: 10px; font-size: 0.9em; color: #888;">
                    –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                </div>
            </div>
        </div>

        <!-- Connection Status -->
        <div class="connection-status" id="connectionInfo">
            üî¥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket...
        </div>
    </div>

    <script>
        let ws = new WebSocket('ws://' + window.location.hostname + ':81/');
        let reconnectInterval;
        let selectedFile = null;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        document.addEventListener('DOMContentLoaded', function() {
            setupEventListeners();
            loadFileList(); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        });
        
        function setupEventListeners() {
            // –°–ª–∞–π–¥–µ—Ä—ã THC
            document.getElementById('voltageSlider').addEventListener('input', function(e) {
                document.getElementById('voltageValue').textContent = e.target.value;
            });
            
            document.getElementById('deadZoneSlider').addEventListener('input', function(e) {
                document.getElementById('deadZoneValue').textContent = e.target.value;
            });
            
            document.getElementById('correctionSlider').addEventListener('input', function(e) {
                document.getElementById('correctionValue').textContent = parseFloat(e.target.value).toFixed(2);
            });
        }
        
        // WebSocket handlers
        ws.onopen = function() {
            console.log('WebSocket connected');
            updateConnectionStatus(true);
            clearInterval(reconnectInterval);
        };
        
        ws.onclose = function() {
            console.log('WebSocket disconnected');
            updateConnectionStatus(false);
            // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            reconnectInterval = setInterval(() => {
                console.log('Attempting to reconnect...');
                ws = new WebSocket('ws://' + window.location.hostname + ':81/');
            }, 3000);
        };
        
        ws.onmessage = function(event) {
            const data = JSON.parse(event.data);
            updateUI(data);
        };
        
        function updateUI(data) {
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            if (data.arcVoltage !== undefined) {
                document.getElementById('arcVoltage').textContent = data.arcVoltage.toFixed(1) + ' V';
            }
            if (data.currentHeight !== undefined) {
                document.getElementById('currentHeight').textContent = data.currentHeight.toFixed(2) + ' mm';
            }
            if (data.targetVoltage !== undefined) {
                document.getElementById('targetVoltage').textContent = data.targetVoltage + ' V';
            }
            if (data.arcOK !== undefined) {
                document.getElementById('arcStatus').textContent = data.arcOK ? '–î–ê' : '–ù–ï–¢';
                document.getElementById('arcStatus').style.color = data.arcOK ? '#4CAF50' : '#f44336';
            }
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            if (data.x !== undefined) document.getElementById('posX').textContent = data.x.toFixed(1);
            if (data.y !== undefined) document.getElementById('posY').textContent = data.y.toFixed(1);
            if (data.z !== undefined) document.getElementById('posZ').textContent = data.z.toFixed(1);
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤
            if (data.machineState !== undefined) document.getElementById('machineStatus').textContent = data.machineState;
            if (data.thcEnabled !== undefined) {
                document.getElementById('thcStatus').textContent = 'THC: ' + (data.thcEnabled ? '–í–∫–ª' : '–í—ã–∫–ª');
                const thcToggle = document.getElementById('thcToggle');
                thcToggle.textContent = data.thcEnabled ? 'THC –í—ã–∫–ª' : 'THC –í–∫–ª';
                thcToggle.className = data.thcEnabled ? 'btn btn-danger' : 'btn btn-success';
            }
            if (data.plasmaActive !== undefined) {
                document.getElementById('plasmaStatus').textContent = '–ü–ª–∞–∑–º–∞: ' + (data.plasmaActive ? '–í–∫–ª' : '–í—ã–∫–ª');
            }
            if (data.thcActive !== undefined) {
                document.getElementById('thcActiveStatus').textContent = data.thcActive ? '–ê–∫—Ç–∏–≤–Ω–æ' : '–ù–µ –∞–∫—Ç–∏–≤–Ω–æ';
                document.getElementById('thcActiveStatus').style.color = data.thcActive ? '#4CAF50' : '#f44336';
            }
        }
        
        function updateConnectionStatus(connected) {
            const status = document.getElementById('connectionInfo');
            status.textContent = connected ? 'üü¢ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω - –°–∏—Å—Ç–µ–º–∞ –æ–Ω–ª–∞–π–Ω' : 'üî¥ WebSocket –æ—Ç–∫–ª—é—á–µ–Ω - –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';
            status.style.background = connected ? '#4CAF50' : '#f44336';
        }
        
        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π
        function plasmaOn() {
            sendCommand('plasma_on');
        }
        
        function plasmaOff() {
            sendCommand('plasma_off');
        }
        
        function toggleTHC() {
            sendCommand('toggle_thc');
        }
        
        function homeAll() {
            sendCommand('home_all');
        }
        
        function emergencyStop() {
            if(confirm('!!! –í–ù–ò–ú–ê–ù–ò–ï !!!\n\n–ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?')) {
                sendCommand('emergency_stop');
            }
        }
        
        function jog(direction) {
            sendCommand('jog', { direction: direction, distance: 10 });
        }
        
        function saveTHCSettings() {
            const settings = {
                voltage: parseInt(document.getElementById('voltageSlider').value),
                deadZone: parseInt(document.getElementById('deadZoneSlider').value),
                correctionRate: parseFloat(document.getElementById('correctionSlider').value)
            };
            sendCommand('thc_settings', settings);
            alert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ THC —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
        }
        
        // –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏
        function loadFileList() {
            fetch('/api/files/list')
                .then(response => response.json())
                .then(files => {
                    const fileList = document.getElementById('fileList');
                    // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∞—Ö —Ñ–∞–π–ª–æ–≤
                    fileList.innerHTML = files.map(file => {
                        const safeFilename = file.replace(/'/g, "\\'").replace(/"/g, "\\\"");
                        return `<div class="file-item" onclick="selectFile('${safeFilename}')" 
                              style="padding: 8px; border-bottom: 1px solid #444; cursor: pointer; margin: 2px 0; border-radius: 3px;">
                         üìÑ ${file}
                         </div>`;
                    }).join('');
                })
                .catch(error => {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤:', error);
                    document.getElementById('fileList').innerHTML = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤';
                });
        }

        function selectFile(filename) {
            selectedFile = filename;
            document.getElementById('selectedFileInfo').innerHTML = 
                `üìÑ –í—ã–±—Ä–∞–Ω: <strong>${filename}</strong>`;
            
            // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            const items = document.querySelectorAll('.file-item');
            items.forEach(item => {
                item.style.background = item.textContent.includes(filename) ? '#444' : 'transparent';
            });
        }

        function uploadFile() {
            const fileInput = document.getElementById('fileInput');
            const file = fileInput.files[0];
            
            if (!file) {
                alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
                return;
            }
            
            const formData = new FormData();
            formData.append('file', file);
            
            fetch('/api/files/upload', {
                method: 'POST',
                body: formData
            })
            .then(response => response.text())
            .then(result => {
                alert('‚úÖ ' + result);
                loadFileList();
                fileInput.value = '';
            })
            .catch(error => {
                alert('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + error);
            });
        }

        function runSelectedFile() {
            if (!selectedFile) {
                alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞');
                return;
            }
            
            if(confirm(`–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª: ${selectedFile}?`)) {
                fetch('/api/files/run?filename=' + encodeURIComponent(selectedFile), {
                    method: 'POST'
                })
                .then(response => response.text())
                .then(result => {
                    alert('‚ñ∂Ô∏è ' + result);
                })
                .catch(error => {
                    alert('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ' + error);
                });
            }
        }

        function deleteSelectedFile() {
            if (!selectedFile) {
                alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
                return;
            }
            
            if(confirm(`–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: ${selectedFile}?`)) {
                fetch('/api/files/delete?filename=' + encodeURIComponent(selectedFile), {
                    method: 'POST'
                })
                .then(response => response.text())
                .then(result => {
                    alert('üóëÔ∏è ' + result);
                    selectedFile = null;
                    loadFileList();
                    document.getElementById('selectedFileInfo').innerHTML = '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è';
                })
                .catch(error => {
                    alert('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ' + error);
                });
            }
        }

        // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        function sendCommand(command, data = {}) {
            const message = { command, ...data };
            if(ws.readyState === WebSocket.OPEN) {
                ws.send(JSON.stringify(message));
            } else {
                alert('WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.');
            }
        }
    </script>
</body>
</html>
)rawliteral";
}