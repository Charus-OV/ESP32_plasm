#include "WebInterface.h"
#include "Config.h"
#include "StepperControl.h"
#include "PlasmaControl.h"
#include "THC_System.h"
#include "FileManager.h"
#include "MaterialPresets.h"

WebServer WebInterface::server(80);
WebSocketsServer WebInterface::webSocket(81);

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è G-code –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
struct GCodeState {
    String filename;
    int currentLine;
    int totalLines;
    bool isRunning;
    bool isPaused;
    String buffer;
    long startTime;
    int retryCount;
};

GCodeState gcodeState = {"", 0, 0, false, false, "", 0, 0};
const int MAX_RETRY_COUNT = 3;
String currentGCodeLine = "";
int currentLineNumber = 0;
bool isGCodeRunning = false;

void WebInterface::init() {
  // –ó–∞–ø—É—Å–∫ WiFi
  WiFi.softAP(WIFI_SSID, WIFI_PASSWORD);
  Serial.printf("üì° WiFi AP started: %s\n", WiFi.softAPIP().toString().c_str());

  // –ú–∞—Ä—à—Ä—É—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤:
  server.on(
    "/api/files/upload", HTTP_POST, []() {
      WebInterface::server.send(200, "text/plain", "Upload complete");
    },
    WebInterface::handleFileUpload);

  server.on("/api/files/list", HTTP_GET, WebInterface::handleFileList);
  server.on("/api/files/delete", HTTP_POST, WebInterface::handleFileDelete);
  server.on("/api/files/run", HTTP_POST, WebInterface::handleFileRun);

  // –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è G-code –∫–æ–º–∞–Ω–¥
  server.on("/api/gcode", HTTP_POST, WebInterface::handleGCodeCommand);

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ HTTP –º–∞—Ä—à—Ä—É—Ç–æ–≤
  server.on("/", WebInterface::handleRoot);
  server.on("/api/status", HTTP_GET, WebInterface::handleAPIStatus);
  server.on("/api/files", HTTP_GET, WebInterface::handleAPIFiles);

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω—É–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —á–µ—Ä–µ–∑ HTTP
  server.on("/api/set_zero", HTTP_POST, WebInterface::handleSetZero);

  server.begin();

  // –ó–∞–ø—É—Å–∫ WebSocket
  webSocket.begin();
  webSocket.onEvent(WebInterface::handleWebSocket);

  Serial.println("‚úÖ Web Interface initialized");
}

void WebInterface::handleClient() {
  server.handleClient();
  webSocket.loop();
}

void WebInterface::handleRoot() {
  server.send(200, "text/html", getMainPage());
}

void WebInterface::handleAPIStatus() {
  DynamicJsonDocument doc(1024);
  doc["status"] = "ok";
  doc["version"] = "1.0.0";
  doc["uptime"] = millis() / 1000;
  doc["freeHeap"] = ESP.getFreeHeap();
  doc["wifiClients"] = WiFi.softAPgetStationNum();

  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å SD –∫–∞—Ä—Ç—ã –∏ THC
  doc["sdCardStatus"] = FileManager::isSDCardMounted() ? "mounted" : "error";
  doc["thcEnabled"] = THC_System::isEnabled();
  doc["thcActive"] = THC_System::isActive();
  doc["targetVoltage"] = THC_System::getTargetVoltage();
  doc["arcVoltage"] = PlasmaControl::getArcVoltage();
  doc["plasmaActive"] = PlasmaControl::isActive();

  String response;
  serializeJson(doc, response);
  server.send(200, "application/json", response);
}

void WebInterface::handleAPIFiles() {
  if (!FileManager::isSDCardMounted()) {
    server.send(500, "application/json", "{\"error\":\"SD card not mounted\"}");
    return;
  }

  auto files = FileManager::listFiles();
  DynamicJsonDocument doc(2048);
  JsonArray filesArray = doc.to<JsonArray>();

  for (const String& file : files) {
    filesArray.add(file);
  }

  doc["sdCardStatus"] = "mounted";
  doc["totalFiles"] = files.size();

  String response;
  serializeJson(doc, response);
  server.send(200, "application/json", response);
}

void WebInterface::handleSetZero() {
  if (WebInterface::server.hasArg("axis")) {
    String axis = WebInterface::server.arg("axis");

    if (axis == "X") {
      StepperControl::setCurrentX(0);
    } else if (axis == "Y") {
      StepperControl::setCurrentY(0);
    } else if (axis == "Z") {
      StepperControl::setCurrentZ(0);
    } else if (axis == "XY") {
      StepperControl::setCurrentX(0);
      StepperControl::setCurrentY(0);
    } else if (axis == "XYZ") {
      StepperControl::setCurrentX(0);
      StepperControl::setCurrentY(0);
      StepperControl::setCurrentZ(0);
    }

    Serial.printf("üéØ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±–Ω—É–ª–µ–Ω—ã –¥–ª—è –æ—Å–∏: %s\n", axis.c_str());
    
    DynamicJsonDocument responseDoc(256);
    responseDoc["status"] = "ok";
    responseDoc["axis"] = axis;
    responseDoc["x"] = StepperControl::getCurrentX();
    responseDoc["y"] = StepperControl::getCurrentY();
    responseDoc["z"] = StepperControl::getCurrentZ();
    
    String response;
    serializeJson(responseDoc, response);
    WebInterface::server.send(200, "application/json", response);
  } else {
    WebInterface::server.send(400, "application/json", "{\"error\":\"Missing axis parameter\"}");
  }
}

void WebInterface::handleGCodeCommand() {
  if (server.hasArg("command")) {
    String gcodeCommand = server.arg("command");
    gcodeCommand.trim();
    
    Serial.printf("üìù Received G-code command: %s\n", gcodeCommand.c_str());
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ WebSocket
    DynamicJsonDocument doc(512);
    doc["type"] = "gcode_response";
    doc["command"] = gcodeCommand;
    doc["response"] = "ok";
    doc["timestamp"] = millis();
    
    String response;
    serializeJson(doc, response);
    webSocket.broadcastTXT(response);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ G-code –∫–æ–º–∞–Ω–¥
    processGCodeCommand(gcodeCommand);
    
    server.send(200, "application/json", "{\"status\":\"ok\", \"command\":\"" + gcodeCommand + "\"}");
  } else {
    server.send(400, "application/json", "{\"error\":\"No command provided\"}");
  }
}

void WebInterface::processGCodeCommand(String command) {
  // –ë–∞–∑–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ G-code –∫–æ–º–∞–Ω–¥
  command.toUpperCase();
  
  if (command == "G28") {
    // Home all axes
    StepperControl::homeAll();
    sendGCodeResponse("Homing all axes...");
  } 
  else if (command.startsWith("G0") || command.startsWith("G1")) {
    // Linear movement
    sendGCodeResponse("Linear movement: " + command);
  }
  else if (command.startsWith("G90")) {
    // Absolute positioning
    sendGCodeResponse("Absolute positioning");
  }
  else if (command.startsWith("G91")) {
    // Relative positioning
    sendGCodeResponse("Relative positioning");
  }
  else if (command == "M3") {
    // Plasma on
    PlasmaControl::startPlasma();
    sendGCodeResponse("Plasma started");
  }
  else if (command == "M5") {
    // Plasma off
    PlasmaControl::stopPlasma();
    sendGCodeResponse("Plasma stopped");
  }
  else {
    sendGCodeResponse("Unknown command: " + command);
  }
}

void WebInterface::sendGCodeResponse(const String& response) {
  DynamicJsonDocument doc(512);
  doc["type"] = "gcode_response";
  doc["response"] = response;
  doc["timestamp"] = millis();
  
  String jsonResponse;
  serializeJson(doc, jsonResponse);
  webSocket.broadcastTXT(jsonResponse);
}

void WebInterface::sendGCodeState(const String& state) {
  DynamicJsonDocument doc(512);
  doc["type"] = "gcode_state";
  doc["state"] = state;
  doc["currentLine"] = currentLineNumber;
  doc["currentCommand"] = currentGCodeLine;
  doc["isRunning"] = isGCodeRunning;
  doc["timestamp"] = millis();
  
  String jsonResponse;
  serializeJson(doc, jsonResponse);
  webSocket.broadcastTXT(jsonResponse);
}

// G-code —Ñ—É–Ω–∫—Ü–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
void WebInterface::startGCodeFromLine(const String& filename, int startLine) {
    if (!FileManager::isSDCardMounted()) {
        sendGCodeResponse("‚ùå SD –∫–∞—Ä—Ç–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞");
        return;
    }
    
    File file = SD_MMC.open(filename, "r");
    if (!file) {
        sendGCodeResponse("‚ùå –ù–µ –º–æ–≥—É –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª: " + filename);
        return;
    }
    
    // –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
    int totalLines = 0;
    while (file.available()) {
        file.readStringUntil('\n');
        totalLines++;
    }
    file.close();
    
    if (startLine > totalLines) {
        sendGCodeResponse("‚ùå –°—Ç—Ä–æ–∫–∞ " + String(startLine) + " –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Ñ–∞–π–ª–∞");
        return;
    }
    
    gcodeState.filename = filename;
    gcodeState.currentLine = startLine;
    gcodeState.totalLines = totalLines;
    gcodeState.isRunning = true;
    gcodeState.isPaused = false;
    gcodeState.startTime = millis();
    gcodeState.retryCount = 0;
    
    sendGCodeResponse("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ G-code —Å —Å—Ç—Ä–æ–∫–∏ " + String(startLine) + " –∏–∑ " + String(totalLines));
    sendGCodeState("RUNNING_FROM_LINE");
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    DynamicJsonDocument progressDoc(512);
    progressDoc["type"] = "gcode_progress";
    progressDoc["filename"] = gcodeState.filename;
    progressDoc["currentLine"] = gcodeState.currentLine;
    progressDoc["totalLines"] = gcodeState.totalLines;
    progressDoc["isRunning"] = gcodeState.isRunning;
    progressDoc["isPaused"] = gcodeState.isPaused;
    progressDoc["progress"] = gcodeState.totalLines > 0 ? 
        (float)gcodeState.currentLine / gcodeState.totalLines * 100 : 0;
    progressDoc["retryCount"] = gcodeState.retryCount;
    
    String progressResponse;
    serializeJson(progressDoc, progressResponse);
    webSocket.broadcastTXT(progressResponse);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    processNextGCodeLine();
}

void WebInterface::processNextGCodeLine() {
    if (!gcodeState.isRunning || gcodeState.isPaused) {
        return;
    }
    
    File file = SD_MMC.open(gcodeState.filename, "r");
    if (!file) {
        sendGCodeResponse("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: " + gcodeState.filename);
        gcodeState.isRunning = false;
        sendGCodeState("ERROR");
        return;
    }
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–æ –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
    for (int i = 0; i < gcodeState.currentLine; i++) {
        if (!file.available()) break;
        file.readStringUntil('\n');
    }
    
    // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É
    if (file.available()) {
        String line = file.readStringUntil('\n');
        line.trim();
        
        if (line.length() > 0 && !line.startsWith(";") && !line.startsWith("(")) {
            gcodeState.buffer = line;
            currentGCodeLine = line;
            currentLineNumber = gcodeState.currentLine + 1;
            
            sendGCodeResponse("üìù –°—Ç—Ä–æ–∫–∞ " + String(currentLineNumber) + ": " + line);
            executeGCodeLine(line);
        } else {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            gcodeState.currentLine++;
            file.close();
            processNextGCodeLine();
        }
    } else {
        // –ö–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
        file.close();
        gcodeState.isRunning = false;
        sendGCodeResponse("‚úÖ G-code –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
        sendGCodeState("COMPLETED");
    }
}

void WebInterface::executeGCodeLine(const String& line) {
    // –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è G-code
    sendGCodeResponse("‚ö° –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: " + line);
    
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è G-code
    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏
    delay(100);
    
    // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ
    gcodeState.currentLine++;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    DynamicJsonDocument progressDoc(512);
    progressDoc["type"] = "gcode_progress";
    progressDoc["filename"] = gcodeState.filename;
    progressDoc["currentLine"] = gcodeState.currentLine;
    progressDoc["totalLines"] = gcodeState.totalLines;
    progressDoc["isRunning"] = gcodeState.isRunning;
    progressDoc["isPaused"] = gcodeState.isPaused;
    progressDoc["progress"] = gcodeState.totalLines > 0 ? 
        (float)gcodeState.currentLine / gcodeState.totalLines * 100 : 0;
    progressDoc["retryCount"] = gcodeState.retryCount;
    
    String progressResponse;
    serializeJson(progressDoc, progressResponse);
    webSocket.broadcastTXT(progressResponse);
    
    processNextGCodeLine();
}

void WebInterface::handlePlasmaOutage() {
    if (gcodeState.isRunning) {
        sendGCodeResponse("‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù –°–ë–û–ô –ü–õ–ê–ó–ú–´! –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞...");
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–∑–º—É
        PlasmaControl::stopPlasma();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        int recoveryLine = gcodeState.currentLine - 3; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ 3 —Å—Ç—Ä–æ–∫–∏ –Ω–∞–∑–∞–¥
        if (recoveryLine < 0) recoveryLine = 0;
        
        sendGCodeResponse("üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é —Å —Å—Ç—Ä–æ–∫–∏ " + String(recoveryLine + 1));
        
        // –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        gcodeState.isPaused = true;
        sendGCodeState("PLASMA_OUTAGE");
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        DynamicJsonDocument progressDoc(512);
        progressDoc["type"] = "gcode_progress";
        progressDoc["filename"] = gcodeState.filename;
        progressDoc["currentLine"] = gcodeState.currentLine;
        progressDoc["totalLines"] = gcodeState.totalLines;
        progressDoc["isRunning"] = gcodeState.isRunning;
        progressDoc["isPaused"] = gcodeState.isPaused;
        progressDoc["progress"] = gcodeState.totalLines > 0 ? 
            (float)gcodeState.currentLine / gcodeState.totalLines * 100 : 0;
        progressDoc["retryCount"] = gcodeState.retryCount;
        
        String progressResponse;
        serializeJson(progressDoc, progressResponse);
        webSocket.broadcastTXT(progressResponse);
        
        // –ñ–¥–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥—É–≥–∏
        sendGCodeResponse("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–∞–∑–º—ã...");
    }
}

void WebInterface::resumeAfterPlasmaRecovery() {
    if (gcodeState.isPaused && gcodeState.retryCount < MAX_RETRY_COUNT) {
        gcodeState.retryCount++;
        sendGCodeResponse("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è #" + String(gcodeState.retryCount));
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –Ω–∞–∑–∞–¥ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ–≤–∞
        int restartLine = gcodeState.currentLine - 2;
        if (restartLine < 0) restartLine = 0;
        
        gcodeState.currentLine = restartLine;
        gcodeState.isPaused = false;
        
        sendGCodeResponse("‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å —Å—Ç—Ä–æ–∫–∏ " + String(restartLine + 1));
        sendGCodeState("RECOVERY");
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        DynamicJsonDocument progressDoc(512);
        progressDoc["type"] = "gcode_progress";
        progressDoc["filename"] = gcodeState.filename;
        progressDoc["currentLine"] = gcodeState.currentLine;
        progressDoc["totalLines"] = gcodeState.totalLines;
        progressDoc["isRunning"] = gcodeState.isRunning;
        progressDoc["isPaused"] = gcodeState.isPaused;
        progressDoc["progress"] = gcodeState.totalLines > 0 ? 
            (float)gcodeState.currentLine / gcodeState.totalLines * 100 : 0;
        progressDoc["retryCount"] = gcodeState.retryCount;
        
        String progressResponse;
        serializeJson(progressDoc, progressResponse);
        webSocket.broadcastTXT(progressResponse);
        
        processNextGCodeLine();
    } else if (gcodeState.retryCount >= MAX_RETRY_COUNT) {
        sendGCodeResponse("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è. –û—Å—Ç–∞–Ω–æ–≤–∫–∞.");
        gcodeState.isRunning = false;
        sendGCodeState("FAILED");
    }
}

void WebInterface::handleFileUpload() {
  HTTPUpload& upload = server.upload();
  static File uploadFile;

  if (upload.status == UPLOAD_FILE_START) {
    if (!FileManager::isSDCardMounted()) {
      server.send(500, "text/plain", "SD card not mounted");
      return;
    }
    
    String filename = "/" + upload.filename;
    uploadFile = SD_MMC.open(filename, FILE_WRITE);
    if (!uploadFile) {
      server.send(500, "text/plain", "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞");
      return;
    }
    Serial.println("üì§ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏: " + upload.filename);
  } else if (upload.status == UPLOAD_FILE_WRITE) {
    if (uploadFile) {
      uploadFile.write(upload.buf, upload.currentSize);
    }
  } else if (upload.status == UPLOAD_FILE_END) {
    if (uploadFile) {
      uploadFile.close();
      Serial.println("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: " + upload.filename);
      server.send(200, "text/plain", "–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: " + upload.filename);
    }
  }
}

void WebInterface::handleFileList() {
  if (!FileManager::isSDCardMounted()) {
    server.send(500, "application/json", "{\"error\":\"SD card not mounted\"}");
    return;
  }

  auto files = FileManager::listFiles();
  DynamicJsonDocument doc(2048);
  JsonArray filesArray = doc.to<JsonArray>();

  for (const String& file : files) {
    filesArray.add(file);
  }

  doc["sdCardStatus"] = "mounted";
  doc["totalFiles"] = files.size();

  String response;
  serializeJson(doc, response);
  server.send(200, "application/json", response);
}

void WebInterface::handleFileDelete() {
  if (!FileManager::isSDCardMounted()) {
    server.send(500, "text/plain", "SD card not mounted");
    return;
  }

  String filename = server.arg("filename");
  if (FileManager::deleteFile(filename)) {
    server.send(200, "text/plain", "–§–∞–π–ª —É–¥–∞–ª–µ–Ω: " + filename);
  } else {
    server.send(500, "text/plain", "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞");
  }
}

void WebInterface::handleFileRun() {
  String filename = server.arg("filename");
  if (FileManager::runGCodeFile(filename)) {
    server.send(200, "text/plain", "–ó–∞–ø—É—Å–∫ —Ñ–∞–π–ª–∞: " + filename);
  } else {
    server.send(500, "text/plain", "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ–∞–π–ª–∞");
  }
}

void WebInterface::handleWebSocket(uint8_t num, WStype_t type, uint8_t* payload, size_t length) {
  switch (type) {
    case WStype_DISCONNECTED:
      Serial.printf("[%u] WebSocket disconnected\n", num);
      break;
    case WStype_CONNECTED:
      {
        IPAddress ip = webSocket.remoteIP(num);
        Serial.printf("[%u] WebSocket connected from %d.%d.%d.%d\n", num, ip[0], ip[1], ip[2], ip[3]);
        sendSystemState();
      }
      break;
    case WStype_TEXT:
      {
        String message = String((char*)payload);
        processWebSocketCommand(message);
      }
      break;
  }
}

void WebInterface::sendSystemState() {
  DynamicJsonDocument doc(1024);

  doc["type"] = "status";
  doc["arcVoltage"] = PlasmaControl::getArcVoltage();
  doc["arcOK"] = PlasmaControl::isArcOK();
  doc["plasmaActive"] = PlasmaControl::isActive();
  doc["currentHeight"] = StepperControl::getCurrentZ();
  doc["targetVoltage"] = THC_System::getTargetVoltage();
  doc["thcEnabled"] = THC_System::isEnabled();
  doc["thcActive"] = THC_System::isActive();
  doc["machineState"] = "Ready";
  doc["x"] = StepperControl::getCurrentX();
  doc["y"] = StepperControl::getCurrentY();
  doc["z"] = StepperControl::getCurrentZ();
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å SD –∫–∞—Ä—Ç—ã
  doc["sdCardStatus"] = FileManager::isSDCardMounted() ? "mounted" : "error";
  doc["sdCardFiles"] = FileManager::getFileCount();

  String jsonString;
  serializeJson(doc, jsonString);
  webSocket.broadcastTXT(jsonString);
}

void WebInterface::processWebSocketCommand(String message) {
  DynamicJsonDocument doc(1024);
  DeserializationError error = deserializeJson(doc, message);

  if (error) {
    Serial.print("JSON parsing failed: ");
    Serial.println(error.c_str());
    return;
  }

  String command = doc["command"];
  Serial.println("Received command: " + command);

  if (command == "plasma_on") {
    PlasmaControl::startPlasma();
  } else if (command == "plasma_off") {
    PlasmaControl::stopPlasma();
  } else if (command == "jog") {
    String direction = doc["direction"];
    float distance = doc["distance"];
    StepperControl::jog(direction, distance);
  } else if (command == "home_all") {
    StepperControl::homeAll();
  } else if (command == "emergency_stop") {
    Serial.println("üõë EMERGENCY STOP");
    PlasmaControl::stopPlasma();
    THC_System::disable();
    isGCodeRunning = false;
    gcodeState.isRunning = false;
    sendGCodeState("EMERGENCY_STOP");
  } else if (command == "toggle_thc") {
    THC_System::toggle();
  } else if (command == "thc_settings") {
    float voltage = doc["voltage"];
    int deadZone = doc["deadZone"];
    THC_System::setTargetVoltage(voltage);
    Serial.printf("THC settings: voltage=%.1f, deadZone=%d\n", voltage, deadZone);
  } else if (command == "load_preset") {
    String presetName = doc["presetName"];
    Serial.printf("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ—Å–µ—Ç: %s\n", presetName.c_str());
  } else if (command == "create_preset") {
    String name = doc["name"];
    float voltage = doc["voltage"];
    float deadZone = doc["deadZone"];
    float speed = doc["speed"];
    float pierceHeight = doc["pierceHeight"];
    float cutHeight = doc["cutHeight"];
    float pierceDelay = doc["pierceDelay"];
    Serial.printf("‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞: %s (%.1fV, %.0fmm/min)\n", name.c_str(), voltage, speed);
  } else if (command == "update_preset") {
    String oldName = doc["oldName"];
    String newName = doc["newData"]["name"];
    Serial.printf("‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞: %s -> %s\n", oldName.c_str(), newName.c_str());
  } else if (command == "delete_preset") {
    String presetName = doc["presetName"];
    Serial.printf("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞: %s\n", presetName.c_str());
  } else if (command == "set_zero") {
    String axis = doc["axis"];
    Serial.printf("üéØ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω—É–ª—è –¥–ª—è –æ—Å–∏: %s\n", axis.c_str());

    if (axis == "X") {
      StepperControl::setCurrentX(0);
    } else if (axis == "Y") {
      StepperControl::setCurrentY(0);
    } else if (axis == "Z") {
      StepperControl::setCurrentZ(0);
    } else if (axis == "XY") {
      StepperControl::setCurrentX(0);
      StepperControl::setCurrentY(0);
    } else if (axis == "XYZ") {
      StepperControl::setCurrentX(0);
      StepperControl::setCurrentY(0);
      StepperControl::setCurrentZ(0);
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    DynamicJsonDocument responseDoc(512);
    responseDoc["type"] = "status";
    responseDoc["x"] = StepperControl::getCurrentX();
    responseDoc["y"] = StepperControl::getCurrentY();
    responseDoc["z"] = StepperControl::getCurrentZ();

    String response;
    serializeJson(responseDoc, response);
    webSocket.broadcastTXT(response);

  } else if (command == "set_current_as_zero") {
    Serial.println("üéØ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–∫ –Ω—É–ª–µ–≤–æ–π");
    StepperControl::setCurrentPositionAsZero();

    DynamicJsonDocument responseDoc(512);
    responseDoc["type"] = "status";
    responseDoc["x"] = StepperControl::getCurrentX();
    responseDoc["y"] = StepperControl::getCurrentY();
    responseDoc["z"] = StepperControl::getCurrentZ();

    String response;
    serializeJson(responseDoc, response);
    webSocket.broadcastTXT(response);
  } else if (command == "get_file_list") {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ WebSocket
    auto files = FileManager::listFiles();
    DynamicJsonDocument fileDoc(2048);
    fileDoc["type"] = "file_list";
    JsonArray filesArray = fileDoc.to<JsonArray>();
    for (const String& file : files) {
      filesArray.add(file);
    }
    fileDoc["sdCardStatus"] = FileManager::isSDCardMounted() ? "mounted" : "error";
    fileDoc["totalFiles"] = files.size();
    
    String fileResponse;
    serializeJson(fileDoc, fileResponse);
    webSocket.broadcastTXT(fileResponse);
  } else if (command == "send_gcode") {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ G-code –∫–æ–º–∞–Ω–¥—ã –∏–∑ WebSocket
    String gcode = doc["gcode"];
    processGCodeCommand(gcode);
  } else if (command == "start_gcode_file") {
    // –ó–∞–ø—É—Å–∫ G-code —Ñ–∞–π–ª–∞
    String filename = doc["filename"];
    isGCodeRunning = true;
    sendGCodeState("STARTED");
    Serial.printf("‚ñ∂Ô∏è Starting G-code file: %s\n", filename.c_str());
  } else if (command == "pause_gcode") {
    // –ü–∞—É–∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è G-code
    isGCodeRunning = false;
    gcodeState.isPaused = true;
    sendGCodeState("PAUSED");
    Serial.println("‚è∏Ô∏è G-code execution paused");
  } else if (command == "resume_gcode") {
    // –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è G-code
    isGCodeRunning = true;
    gcodeState.isPaused = false;
    sendGCodeState("RUNNING");
    Serial.println("‚ñ∂Ô∏è G-code execution resumed");
  } else if (command == "stop_gcode") {
    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è G-code
    isGCodeRunning = false;
    gcodeState.isRunning = false;
    sendGCodeState("STOPPED");
    Serial.println("‚èπÔ∏è G-code execution stopped");
  } else if (command == "start_gcode_from_line") {
    // –ó–∞–ø—É—Å–∫ G-code —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    String filename = doc["filename"];
    int startLine = doc["startLine"];
    startGCodeFromLine(filename, startLine);
  } else if (command == "handle_plasma_outage") {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±–æ—è –ø–ª–∞–∑–º—ã
    handlePlasmaOutage();
  } else if (command == "resume_after_recovery") {
    // –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    resumeAfterPlasmaRecovery();
  } else if (command == "get_gcode_progress") {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    DynamicJsonDocument progressDoc(512);
    progressDoc["type"] = "gcode_progress";
    progressDoc["filename"] = gcodeState.filename;
    progressDoc["currentLine"] = gcodeState.currentLine;
    progressDoc["totalLines"] = gcodeState.totalLines;
    progressDoc["isRunning"] = gcodeState.isRunning;
    progressDoc["isPaused"] = gcodeState.isPaused;
    progressDoc["progress"] = gcodeState.totalLines > 0 ? 
        (float)gcodeState.currentLine / gcodeState.totalLines * 100 : 0;
    progressDoc["retryCount"] = gcodeState.retryCount;
    
    String progressResponse;
    serializeJson(progressDoc, progressResponse);
    webSocket.broadcastTXT(progressResponse);
  }

  sendSystemState();
}

String WebInterface::getMainPage() {
  // –ü–æ–ª–Ω—ã–π HTML –∫–æ–¥ –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  // [–ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–Ω—ã–π HTML –∫–æ–¥]
  return R"rawliteral(
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>–ß–ü–£ –ü–ª–∞–∑–º–∞</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        :root {
            --primary: #2196F3;
            --secondary: #FF9800;
            --success: #4CAF50;
            --danger: #f44336;
            --dark: #1a1a1a;
            --darker: #2a2a2a;
            --text: #ffffff;
        }
        
        * { margin: 0; padding: 0; box-sizing: border-box; }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: var(--dark);
            color: var(--text);
            overflow-x: hidden;
        }
        
        .app-container {
            display: grid;
            grid-template-rows: auto 1fr auto;
            height: 100vh;
            gap: 10px;
            padding: 10px;
        }
        
        /* Header */
        .header {
            background: var(--darker);
            padding: 15px 20px;
            border-radius: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 10px rgba(0,0,0,0.3);
        }
        
        .logo { display: flex; align-items: center; gap: 10px; }
        .logo h1 { color: var(--success); font-size: 1.5em; }
        
        .status-bar {
            display: flex;
            gap: 15px;
            align-items: center;
        }
        
        .status-item {
            padding: 5px 10px;
            border-radius: 15px;
            background: #333;
            font-size: 0.9em;
        }
        
        /* Main Content */
        .main-content {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 10px;
            height: 100%;
        }
        
        .panel {
            background: var(--darker);
            border-radius: 10px;
            padding: 15px;
            border: 1px solid #333;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            overflow-y: auto;
        }
        
        .panel h3 {
            color: var(--primary);
            margin-bottom: 15px;
            border-bottom: 1px solid #333;
            padding-bottom: 5px;
        }
        
        /* Monitoring Panel */
        .monitor-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 8px;
        }
        
        .monitor-item {
            background: #333;
            padding: 10px;
            border-radius: 5px;
            text-align: center;
        }
        
        .monitor-label {
            font-size: 0.8em;
            color: #aaa;
            margin-bottom: 5px;
        }
        
        .monitor-value {
            font-size: 1.2em;
            font-weight: bold;
            color: var(--success);
        }
        
        .position-display {
            margin-top: 15px;
            background: #333;
            padding: 10px;
            border-radius: 5px;
        }
        
        /* Jog Control */
        .jog-layout {
            display: grid;
            grid-template-columns: auto auto auto;
            gap: 15px;
            align-items: start;
        }
        
        .zero-controls-column {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }
        
        .jog-center-column {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 10px;
        }
        
        .grid-controls-column {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }
        
        .xy-jog-container {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .xy-jog-grid {
            display: grid;
            grid-template-areas: 
                ". y-plus ."
                "x-minus center x-plus"
                ". y-minus .";
            grid-template-columns: 60px 60px 60px;
            grid-template-rows: 60px 60px 60px;
            gap: 5px;
        }
        
        .z-jog-buttons {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }
        
        .jog-btn {
            background: var(--primary);
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 1.1em;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.2s;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .jog-btn:hover {
            transform: scale(1.05);
            box-shadow: 0 4px 8px rgba(0,0,0,0.3);
        }
        
        .jog-btn:active {
            transform: scale(0.95);
        }
        
        /* –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ XY */
        .btn-y-plus { grid-area: y-plus; background: #FF9800; }
        .btn-y-minus { grid-area: y-minus; background: #FF9800; }
        .btn-x-plus { grid-area: x-plus; background: #2196F3; }
        .btn-x-minus { grid-area: x-minus; background: #2196F3; }
        .btn-center { 
            grid-area: center; 
            background: #666; 
            font-size: 0.7em;
            cursor: default;
        }
        .btn-center:hover { transform: none; box-shadow: none; }
        
        /* –ö–Ω–æ–ø–∫–∏ Z */
        .btn-z-plus { 
            background: #4CAF50; 
            width: 50px;
            height: 60px;
            font-size: 1.2em;
        }
        .btn-z-minus { 
            background: #4CAF50; 
            width: 50px;
            height: 60px;
            font-size: 1.2em;
        }
        
        .btn {
            background: var(--primary);
            color: white;
            border: none;
            padding: 12px 15px;
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.3s;
            font-size: 0.9em;
        }
        
        .btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 3px 8px rgba(0,0,0,0.3);
        }
        
        .btn-success { background: var(--success); }
        .btn-danger { background: var(--danger); }
        .btn-warning { background: var(--secondary); }
        .btn-info { background: #00BCD4; }
        
        /* –ö–Ω–æ–ø–∫–∏ –æ–±–Ω—É–ª–µ–Ω–∏—è –∏ —Å–µ—Ç–∫–∏ */
        .zero-btn {
            background: #FF9800;
            color: white;
            border: none;
            padding: 10px 8px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 0.75em;
            text-align: center;
        }
        
        .zero-btn:hover {
            background: #F57C00;
        }
        
        .grid-btn {
            background: #555;
            color: white;
            border: none;
            padding: 10px 8px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 0.75em;
            text-align: center;
        }
        
        .grid-btn.active {
            background: var(--primary);
            font-weight: bold;
        }
        
        .grid-btn:hover {
            background: #1976D2;
        }
        
        /* THC Controls */
        .slider-group {
            margin: 15px 0;
        }
        
        .slider-group label {
            display: block;
            margin-bottom: 5px;
            color: #ccc;
        }
        
        .slider-container {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        input[type="range"] {
            flex: 1;
            height: 6px;
            background: #333;
            border-radius: 3px;
            outline: none;
        }
        
        .slider-value {
            min-width: 60px;
            text-align: right;
            font-weight: bold;
        }
        
        /* File Manager Styles */
        .file-item {
            transition: background 0.2s;
            border-radius: 3px;
            padding: 8px;
            margin: 2px 0;
            cursor: pointer;
            border-bottom: 1px solid #444;
        }
        
        .file-item:hover {
            background: #3a3a3a !important;
        }
        
        .file-item.selected {
            background: #555 !important;
        }
        
        .file-upload-section {
            margin-bottom: 15px;
        }
        
        .file-controls {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }
        
        /* Presets Editor */
        .preset-editor { 
            background: #333; 
            padding: 15px; 
            border-radius: 5px; 
            margin-top: 10px; 
        }
        
        .preset-field { 
            display: grid; 
            grid-template-columns: 1fr 1fr; 
            gap: 10px; 
            margin: 8px 0; 
            align-items: center; 
        }
        
        .preset-field input { 
            background: #444; 
            color: white; 
            border: 1px solid #555; 
            padding: 8px; 
            border-radius: 3px; 
        }
        
        .modal { 
            display: none; 
            position: fixed; 
            top: 0; 
            left: 0; 
            width: 100%; 
            height: 100%; 
            background: rgba(0,0,0,0.8); 
            z-index: 1000; 
        }
        
        .modal-content { 
            background: #2a2a2a; 
            margin: 10% auto; 
            padding: 20px; 
            border-radius: 10px; 
            width: 90%; 
            max-width: 500px; 
        }

        /* Connection Status */
        .connection-status {
            text-align: center;
            padding: 10px;
            border-radius: 5px;
            margin: 10px 0;
            background: #333;
        }
        
        /* G-code Panel Styles */
        .gcode-panel {
            grid-column: span 2;
        }
        
        #gcodeConsole {
            line-height: 1.4;
        }
        
        #gcodeConsole div {
            margin-bottom: 2px;
            padding: 2px 5px;
            border-radius: 2px;
        }
        
        #gcodeConsole div:nth-child(odd) {
            background: rgba(255,255,255,0.05);
        }
        
        #gcodeConsole .command {
            color: #ffff00;
        }
        
        #gcodeConsole .response {
            color: #00ffff;
        }
        
        #gcodeConsole .error {
            color: #ff4444;
            background: rgba(255,0,0,0.1);
        }
        
        #gcodeConsole .warning {
            color: #ffaa00;
        }
        
        #gcodeHistory div {
            padding: 4px;
            margin: 2px 0;
            background: #444;
            border-radius: 3px;
            border-left: 3px solid #2196F3;
        }
        
        #gcodeHistory div.success {
            border-left-color: #4CAF50;
        }
        
        #gcodeHistory div.error {
            border-left-color: #f44336;
        }
        
        /* Recovery Panel Styles */
        .recovery-panel {
            grid-column: span 2;
        }
        
        #recoveryLog div {
            margin-bottom: 2px;
            padding: 3px 5px;
            border-radius: 2px;
        }
        
        #recoveryLog .warning {
            color: #ffaa00;
            background: rgba(255,170,0,0.1);
        }
        
        #recoveryLog .error {
            color: #ff4444;
            background: rgba(255,0,0,0.1);
        }
        
        #recoveryLog .success {
            color: #44ff44;
            background: rgba(0,255,0,0.1);
        }
        
        #recoveryLog .info {
            color: #44aaff;
        }
        
        /* Responsive */
        @media (max-width: 1200px) {
            .main-content {
                grid-template-columns: 1fr;
                grid-template-rows: auto auto auto;
            }
            
            .jog-layout {
                grid-template-columns: 1fr;
                gap: 10px;
            }
            
            .zero-controls-column,
            .grid-controls-column {
                flex-direction: row;
                justify-content: center;
            }
            
            .gcode-panel,
            .recovery-panel {
                grid-column: 1;
            }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- Header -->
        <header class="header">
            <div class="logo">
                <h1>‚ö° –ß–ü–£ –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä (–ø–ª–∞–∑–º–∞)</h1>
            </div>
            <div class="status-bar">
                <div class="status-item" id="connectionStatus">üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ</div>
                <div class="status-item" id="machineStatus">–ì–æ—Ç–æ–≤</div>	
                <div class="status-item" id="thcStatus">THC: –í—ã–∫–ª</div>
                <div class="status-item" id="plasmaStatus">–ü–ª–∞–∑–º–∞: –í—ã–∫–ª</div>
                <div class="status-item" id="sdCardStatus">SD Card: –ü—Ä–æ–≤–µ—Ä–∫–∞...</div>
            </div>
        </header>

        <!-- Main Content -->
        <div class="main-content">
            <!-- Monitoring Panel -->
            <div class="panel monitoring-panel">
                <h3>üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã</h3>
                
                <div class="monitor-grid">
                    <div class="monitor-item">
                        <div class="monitor-label">–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –¥—É–≥–∏</div>
                        <div class="monitor-value" id="arcVoltage">0.0 V</div>
                    </div>
                    <div class="monitor-item">
                        <div class="monitor-label">–¢–µ–∫—É—â–∞—è –≤—ã—Å–æ—Ç–∞</div>
                        <div class="monitor-value" id="currentHeight">0.00 mm</div>
                    </div>
                    <div class="monitor-item">
                        <div class="monitor-label">–¶–µ–ª–µ–≤–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ</div>
                        <div class="monitor-value" id="targetVoltage">140 V</div>
                    </div>
                    <div class="monitor-item">
                        <div class="monitor-label">–°—Ç–∞—Ç—É—Å –¥—É–≥–∏</div>
                        <div class="monitor-value" id="arcStatus">–ù–ï–¢</div>
                    </div>
                </div>

                <div class="position-display">
                    <div style="margin-bottom: 10px; color: #aaa;">–ü–æ–∑–∏—Ü–∏—è:</div>
                    <div style="display: flex; justify-content: space-between;">
                        <span>X: <span id="posX">0.0</span> mm</span>
                        <span>Y: <span id="posY">0.0</span> mm</span>
                        <span>Z: <span id="posZ">0.0</span> mm</span>
                    </div>
                </div>
            </div>

            <!-- Jog Control Panel -->
            <div class="panel jog-panel">
                <h3>üéÆ –†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</h3>
                
                <!-- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê -->
                <div class="jog-layout">
                    <!-- –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –û–±–Ω—É–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç -->
                    <div class="zero-controls-column">
                        <div style="color: #FF9800; font-size: 0.8em; text-align: center; margin-bottom: 5px;">–û–±–Ω—É–ª–µ–Ω–∏–µ:</div>
                        <button class="zero-btn" onclick="setZero('X')">X=0</button>
                        <button class="zero-btn" onclick="setZero('Y')">Y=0</button>
                        <button class="zero-btn" onclick="setZero('Z')">Z=0</button>
                        <button class="zero-btn" onclick="setZero('XY')">XY=0</button>
                        <button class="zero-btn" onclick="setZero('XYZ')">XYZ=0</button>
                    </div>

                    <!-- –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è -->
                    <div class="jog-center-column">
                        <!-- –ö–û–ù–¢–ï–ô–ù–ï–† –° XY –ò Z –ö–ù–û–ü–ö–ê–ú–ò -->
                        <div class="xy-jog-container">
                            <!-- –°–µ—Ç–∫–∞ XY -->
                            <div class="xy-jog-grid">
                                <button class="jog-btn btn-y-plus" onclick="jog('Y+')">Y+</button>
                                <button class="jog-btn btn-y-minus" onclick="jog('Y-')">Y-</button>
                                <button class="jog-btn btn-x-minus" onclick="jog('X-')">X-</button>
                                <div class="jog-btn btn-center">XY</div>
                                <button class="jog-btn btn-x-plus" onclick="jog('X+')">X+</button>
                            </div>
                            
                            <!-- –ö–Ω–æ–ø–∫–∏ Z - –í–ï–†–¢–ò–ö–ê–õ–¨–ù–û —Å–ø—Ä–∞–≤–∞ –æ—Ç X+ -->
                            <div class="z-jog-buttons">
                                <button class="jog-btn btn-z-plus" onclick="jog('Z+')">Z+</button>
                                <button class="jog-btn btn-z-minus" onclick="jog('Z-')">Z-</button>
                            </div>
                        </div>
                        
                        <!-- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ -->
                        <div style="color: #4CAF50; font-size: 0.8em; margin-top: 5px;">
                            –®–∞–≥: <span id="currentGrid">1</span> mm
                        </div>
                    </div>

                    <!-- –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –°–µ—Ç–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è -->
                    <div class="grid-controls-column">
                        <div style="color: #2196F3; font-size: 0.8em; text-align: center; margin-bottom: 5px;">–°–µ—Ç–∫–∞:</div>
                        <button class="grid-btn active" onclick="setGrid(0.1)">0.1mm</button>
                        <button class="grid-btn" onclick="setGrid(1)">1mm</button>
                        <button class="grid-btn" onclick="setGrid(10)">10mm</button>
                        <button class="grid-btn" onclick="setGrid(100)">100mm</button>
                    </div>
                </div>
                
                <div class="control-buttons" style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px; margin-top: 15px;">
                    <button class="btn btn-success" onclick="plasmaOn()">–ü–ª–∞–∑–º–∞ –í–ö–õ</button>
                    <button class="btn btn-danger" onclick="plasmaOff()">–ü–ª–∞–∑–º–∞ –í–´–ö–õ</button>
                    <button class="btn btn-warning" onclick="homeAll()">üè† –î–æ–º–æ–π</button>
                    <button class="btn btn-danger" onclick="emergencyStop()">üõë –ê-–°—Ç–æ–ø</button>
                </div>
            </div>

            <!-- THC Control Panel -->
            <div class="panel thc-panel">
                <h3>üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ THC</h3>
                
                <div class="status-bar" style="margin-bottom: 15px;">
                    <div class="status-item" id="thcActiveStatus">THC: –ù–µ –∞–∫—Ç–∏–≤–Ω–æ</div>
                    <button class="btn" id="thcToggle" onclick="toggleTHC()">THC –í–∫–ª</button>
                </div>

                <div class="slider-group">
                    <label>–¶–µ–ª–µ–≤–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ: <span id="voltageValue">140</span> V</label>
                    <div class="slider-container">
                        <input type="range" id="voltageSlider" min="80" max="200" value="140" step="1">
                        <span class="slider-value" id="voltageDisplay">140 V</span>
                    </div>
                </div>

                <div class="slider-group">
                    <label>–ú–µ—Ä—Ç–≤–∞—è –∑–æ–Ω–∞: ¬±<span id="deadZoneValue">5</span> V</label>
                    <div class="slider-container">
                        <input type="range" id="deadZoneSlider" min="1" max="20" value="5" step="1">
                        <span class="slider-value" id="deadZoneDisplay">5 V</span>
                    </div>
                </div>

                <button class="btn btn-success" onclick="saveTHCSettings()" style="width: 100%; margin-top: 15px;">
                    üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ THC
                </button>
            </div>

            <!-- SD Card Panel -->
            <div class="panel sd-card-panel">
                <h3>üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏ (SD Card)</h3>
                
                <!-- –°—Ç–∞—Ç—É—Å SD –∫–∞—Ä—Ç—ã -->
                <div class="status-bar" style="margin-bottom: 15px;">
                    <div class="status-item" id="sdCardStatusPanel">SD Card: –ü—Ä–æ–≤–µ—Ä–∫–∞...</div>
                    <div class="status-item" id="fileCount">–§–∞–π–ª–æ–≤: 0</div>
                </div>

                <!-- –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ -->
                <div class="file-upload-section">
                    <input type="file" id="fileInput" accept=".gcode,.nc,.txt" style="margin-bottom: 10px; width: 100%; padding: 8px; background: #333; color: white; border: 1px solid #555; border-radius: 5px;">
                    <button class="btn btn-success" onclick="uploadFile()" style="width: 100%;">
                        üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ SD
                    </button>
                </div>

                <!-- –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ -->
                <div style="background: #333; padding: 10px; border-radius: 5px; max-height: 200px; overflow-y: auto;">
                    <div style="color: #aaa; margin-bottom: 10px;">–§–∞–π–ª—ã –Ω–∞ SD –∫–∞—Ä—Ç–µ:</div>
                    <div id="fileList">
                        –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤...
                    </div>
                </div>

                <!-- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º -->
                <div id="selectedFileInfo" style="background: #444; padding: 10px; border-radius: 5px; margin: 10px 0; text-align: center;">
                    –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                </div>

                <div class="file-controls">
                    <button class="btn btn-success" onclick="runSelectedFile()" style="flex: 1;">‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å</button>
                    <button class="btn btn-danger" onclick="deleteSelectedFile()" style="flex: 1;">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
                </div>
            </div>

            <!-- G-code Monitor Panel -->
            <div class="panel gcode-panel">
                <h3>üìü G-code –ú–æ–Ω–∏—Ç–æ—Ä & –ö–æ–Ω—Å–æ–ª—å</h3>
                
                <!-- –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è -->
                <div class="status-bar" style="margin-bottom: 15px;">
                    <div class="status-item" id="gcodeStatus">–°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–Ω–∏–µ</div>
                    <div class="status-item" id="gcodeLine">–°—Ç—Ä–æ–∫–∞: 0</div>
                    <div class="status-item" id="gcodeRunning">–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: ‚ùå</div>
                </div>

                <!-- –ö–æ–Ω—Å–æ–ª—å –≤—ã–≤–æ–¥–∞ -->
                <div style="background: #1a1a1a; border: 1px solid #333; border-radius: 5px; padding: 10px; margin-bottom: 15px;">
                    <div style="color: #aaa; font-size: 0.8em; margin-bottom: 5px;">–ö–æ–Ω—Å–æ–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</div>
                    <div id="gcodeConsole" style="height: 200px; overflow-y: auto; background: #000; color: #00ff00; font-family: 'Courier New', monospace; padding: 10px; border-radius: 3px; font-size: 0.9em;">
                        <div>> G-code –∫–æ–Ω—Å–æ–ª—å –≥–æ—Ç–æ–≤–∞...</div>
                    </div>
                </div>

                <!-- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º -->
                <div style="display: grid; grid-template-columns: 1fr 1fr 1fr 1fr; gap: 8px; margin-bottom: 15px;">
                    <button class="btn btn-success" onclick="startGCode()" id="startGCodeBtn">‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç</button>
                    <button class="btn btn-warning" onclick="pauseGCode()" id="pauseGCodeBtn">‚è∏Ô∏è –ü–∞—É–∑–∞</button>
                    <button class="btn btn-info" onclick="resumeGCode()" id="resumeGCodeBtn">üîÅ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</button>
                    <button class="btn btn-danger" onclick="stopGCode()" id="stopGCodeBtn">‚èπÔ∏è –°—Ç–æ–ø</button>
                </div>

                <!-- –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã -->
                <div style="margin-bottom: 15px;">
                    <div style="color: #aaa; font-size: 0.8em; margin-bottom: 8px;">–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:</div>
                    <div style="display: grid; grid-template-columns: repeat(4, 1fr); gap: 5px;">
                        <button class="btn" onclick="sendGCode('G28')" style="font-size: 0.8em; padding: 8px 5px;">G28 (Home)</button>
                        <button class="btn" onclick="sendGCode('G90')" style="font-size: 0.8em; padding: 8px 5px;">G90 (Abs)</button>
                        <button class="btn" onclick="sendGCode('G91')" style="font-size: 0.8em; padding: 8px 5px;">G91 (Rel)</button>
                        <button class="btn" onclick="sendGCode('M3')" style="font-size: 0.8em; padding: 8px 5px;">M3 (Plasma On)</button>
                        <button class="btn" onclick="sendGCode('M5')" style="font-size: 0.8em; padding: 8px 5px;">M5 (Plasma Off)</button>
                        <button class="btn" onclick="sendGCode('G0 X10 Y10')" style="font-size: 0.8em; padding: 8px 5px;">G0 X10 Y10</button>
                        <button class="btn" onclick="sendGCode('G1 X0 Y0 F1000')" style="font-size: 0.8em; padding: 8px 5px;">G1 X0 Y0</button>
                        <button class="btn" onclick="sendGCode('G4 P1.0')" style="font-size: 0.8em; padding: 8px 5px;">G4 P1.0</button>
                    </div>
                </div>

                <!-- –†—É—á–Ω–æ–π –≤–≤–æ–¥ G-code -->
                <div>
                    <div style="color: #aaa; font-size: 0.8em; margin-bottom: 8px;">–†—É—á–Ω–æ–π –≤–≤–æ–¥ G-code:</div>
                    <div style="display: flex; gap: 8px;">
                        <input type="text" id="gcodeInput" placeholder="–í–≤–µ–¥–∏—Ç–µ G-code –∫–æ–º–∞–Ω–¥—É..." 
                               style="flex: 1; background: #333; color: white; border: 1px solid #555; padding: 10px; border-radius: 5px;"
                               onkeypress="handleGCodeKeypress(event)">
                        <button class="btn btn-success" onclick="sendManualGCode()" style="white-space: nowrap;">üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
                    </div>
                </div>

                <!-- –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥ -->
                <div style="margin-top: 15px;">
                    <div style="color: #aaa; font-size: 0.8em; margin-bottom: 8px;">–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥:</div>
                    <div id="gcodeHistory" style="height: 100px; overflow-y: auto; background: #333; padding: 8px; border-radius: 5px; font-size: 0.8em;">
                        <!-- –ò—Å—Ç–æ—Ä–∏—è –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ -->
                    </div>
                </div>
            </div>

            <!-- Recovery Panel -->
            <div class="panel recovery-panel">
                <h3>üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±–æ–µ–≤</h3>
                
                <!-- –ü—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è -->
                <div class="status-bar" style="margin-bottom: 15px;">
                    <div class="status-item" id="recoveryStatus">–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ</div>
                    <div class="status-item" id="retryCount">–ü–æ–ø—ã—Ç–∫–∏: 0/3</div>
                    <div class="status-item" id="progressPercent">–ü—Ä–æ–≥—Ä–µ—Å—Å: 0%</div>
                </div>

                <!-- –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä -->
                <div style="background: #333; border-radius: 10px; height: 20px; margin-bottom: 15px; overflow: hidden;">
                    <div id="progressBar" style="background: linear-gradient(90deg, #4CAF50, #8BC34A); height: 100%; width: 0%; transition: width 0.3s;"></div>
                </div>

                <!-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ -->
                <div style="background: #333; padding: 10px; border-radius: 5px; margin-bottom: 15px;">
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px; font-size: 0.9em;">
                        <div>–§–∞–π–ª: <span id="currentGCodeFile">-</span></div>
                        <div>–°—Ç—Ä–æ–∫–∞: <span id="currentGCodePosition">-</span></div>
                        <div>–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: <span id="totalGCodeLines">-</span></div>
                        <div>–°–æ—Å—Ç–æ—è–Ω–∏–µ: <span id="gCodeExecutionState">-</span></div>
                    </div>
                </div>

                <!-- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º -->
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px; margin-bottom: 15px;">
                    <button class="btn btn-warning" onclick="simulatePlasmaOutage()" id="simulateOutageBtn">
                        ‚ö° –°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–±–æ–π
                    </button>
                    <button class="btn btn-success" onclick="resumeAfterRecovery()" id="resumeRecoveryBtn">
                        üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                    </button>
                </div>

                <!-- –ó–∞–ø—É—Å–∫ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ -->
                <div style="background: #333; padding: 15px; border-radius: 5px; margin-bottom: 15px;">
                    <div style="color: #aaa; font-size: 0.8em; margin-bottom: 10px;">–ó–∞–ø—É—Å–∫ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏:</div>
                    <div style="display: flex; gap: 10px; align-items: center;">
                        <input type="number" id="startLineInput" placeholder="–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏" 
                               min="1" value="1" style="width: 100px; background: #444; color: white; border: 1px solid #555; padding: 8px; border-radius: 5px;">
                        <button class="btn btn-info" onclick="startFromLine()" style="white-space: nowrap;">
                            üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å —Å—Ç—Ä–æ–∫–∏
                        </button>
                        <button class="btn" onclick="jumpToCurrentLine()" style="white-space: nowrap; background: #666;">
                            üìç –¢–µ–∫—É—â–∞—è
                        </button>
                    </div>
                </div>

                <!-- –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–∫–∞—Ç -->
                <div>
                    <div style="color: #aaa; font-size: 0.8em; margin-bottom: 8px;">–ë—ã—Å—Ç—Ä—ã–π –æ—Ç–∫–∞—Ç:</div>
                    <div style="display: grid; grid-template-columns: repeat(4, 1fr); gap: 5px;">
                        <button class="btn" onclick="jumpBackLines(1)" style="font-size: 0.8em; padding: 8px 5px;">-1 —Å—Ç—Ä–æ–∫–∞</button>
                        <button class="btn" onclick="jumpBackLines(3)" style="font-size: 0.8em; padding: 8px 5px;">-3 —Å—Ç—Ä–æ–∫–∏</button>
                        <button class="btn" onclick="jumpBackLines(5)" style="font-size: 0.8em; padding: 8px 5px;">-5 —Å—Ç—Ä–æ–∫</button>
                        <button class="btn" onclick="jumpBackLines(10)" style="font-size: 0.8em; padding: 8px 5px;">-10 —Å—Ç—Ä–æ–∫</button>
                    </div>
                </div>

                <!-- –õ–æ–≥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è -->
                <div style="margin-top: 15px;">
                    <div style="color: #aaa; font-size: 0.8em; margin-bottom: 8px;">–õ–æ–≥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:</div>
                    <div id="recoveryLog" style="height: 120px; overflow-y: auto; background: #1a1a1a; padding: 10px; border-radius: 5px; font-size: 0.8em; font-family: 'Courier New', monospace;">
                        <div style="color: #00ff00;">> –°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≥–æ—Ç–æ–≤–∞</div>
                    </div>
                </div>
            </div>

            <!-- Presets Panel -->
            <div class="panel presets-panel">
                <h3>üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞–º–∏</h3>
                
                <!-- –í—ã–±–æ—Ä –ø—Ä–µ—Å–µ—Ç–∞ -->
                <div style="display: grid; grid-template-columns: 2fr 1fr 1fr; gap: 10px; margin-bottom: 15px;">
                    <select id="materialPreset" style="background: #333; color: white; border: 1px solid #555; padding: 8px; border-radius: 5px;">
                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª</option>
                        <option value="Steel 3mm">–°—Ç–∞–ª—å 3mm</option>
                        <option value="Steel 6mm">–°—Ç–∞–ª—å 6mm</option>
                        <option value="Steel 10mm">–°—Ç–∞–ª—å 10mm</option>
                        <option value="Aluminum 3mm">–ê–ª—é–º–∏–Ω–∏–π 3mm</option>
                        <option value="Stainless 3mm">–ù–µ—Ä–∂–∞–≤–µ–π–∫–∞ 3mm</option>
                    </select>
                    <button class="btn btn-success" onclick="loadPreset()">üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å</button>
                    <button class="btn btn-danger" onclick="deletePreset()">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
                </div>

                <!-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ—Å–µ—Ç–µ -->
                <div id="presetInfo" style="background: #333; padding: 15px; border-radius: 5px; margin-bottom: 15px;">
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px; font-size: 0.9em;">
                        <div>–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ: <span id="presetVoltage">-</span> V</div>
                        <div>–°–∫–æ—Ä–æ—Å—Ç—å: <span id="presetSpeed">-</span> mm/min</div>
                        <div>–í—ã—Å–æ—Ç–∞ –ø—Ä–æ–±–∏–≤–∫–∏: <span id="presetPierceHeight">-</span> mm</div>
                        <div>–í—ã—Å–æ—Ç–∞ —Ä–µ–∑–∫–∏: <span id="presetCutHeight">-</span> mm</div>
                    </div>
                </div>

                <!-- –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è -->
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">
                    <button class="btn btn-info" onclick="openPresetEditor()">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ—Å–µ—Ç</button>
                    <button class="btn btn-success" onclick="openNewPresetDialog()">‚ûï –ù–æ–≤—ã–π –ø—Ä–µ—Å–µ—Ç</button>
                </div>
            </div>
        </div>

        <!-- Connection Status -->
        <div class="connection-status" id="connectionInfo">
            üî¥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket...
        </div>
    </div>

    <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –ø—Ä–µ—Å–µ—Ç–æ–≤ -->
    <div id="presetEditorModal" class="modal">
        <div class="modal-content">
            <h3 style="margin-top: 0;">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä–µ—Å–µ—Ç–∞</h3>
            
            <div class="preset-field">
                <label>–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:</label>
                <input type="text" id="editPresetName" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –°—Ç–∞–ª—å 5mm" style="background: #444; color: white; border: 1px solid #555; padding: 8px; border-radius: 3px;">
            </div>
            
            <div class="preset-field">
                <label>–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ (V):</label>
                <input type="number" id="editPresetVoltage" value="140" step="1" min="80" max="200" style="background: #444; color: white; border: 1px solid #555; padding: 8px; border-radius: 3px;">
            </div>
            
            <div class="preset-field">
                <label>–ú–µ—Ä—Ç–≤–∞—è –∑–æ–Ω–∞ (¬±V):</label>
                <input type="number" id="editPresetDeadZone" value="5" step="1" min="1" max="20" style="background: #444; color: white; border: 1px solid #555; padding: 8px; border-radius: 3px;">
            </div>
            
            <div class="preset-field">
                <label>–°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ–∑–∫–∏ (mm/min):</label>
                <input type="number" id="editPresetSpeed" value="2000" step="50" min="500" max="5000" style="background: #444; color: white; border: 1px solid #555; padding: 8px; border-radius: 3px;">
            </div>
            
            <div class="preset-field">
                <label>–í—ã—Å–æ—Ç–∞ –ø—Ä–æ–±–∏–≤–∫–∏ (mm):</label>
                <input type="number" id="editPresetPierceHeight" value="5.0" step="0.1" min="1" max="20" style="background: #444; color: white; border: 1px solid #555; padding: 8px; border-radius: 3px;">
            </div>
            
            <div class="preset-field">
                <label>–í—ã—Å–æ—Ç–∞ —Ä–µ–∑–∫–∏ (mm):</label>
                <input type="number" id="editPresetCutHeight" value="3.0" step="0.1" min="1" max="10" style="background: #444; color: white; border: 1px solid #555; padding: 8px; border-radius: 3px;">
            </div>
            
            <div class="preset-field">
                <label>–ó–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–±–∏–≤–∫–∏ (s):</label>
                <input type="number" id="editPresetPierceDelay" value="0.5" step="0.1" min="0.1" max="2.0" style="background: #444; color: white; border: 1px solid #555; padding: 8px; border-radius: 3px;">
            </div>

            <div style="display: flex; gap: 10px; margin-top: 20px;">
                <button class="btn btn-success" onclick="savePreset()" style="flex: 1;">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ—Å–µ—Ç</button>
                <button class="btn btn-danger" onclick="closePresetEditor()" style="flex: 1;">‚ùå –û—Ç–º–µ–Ω–∞</button>
            </div>
        </div>
    </div>

    <script>
        let ws = new WebSocket('ws://' + window.location.hostname + ':81/');
        let reconnectInterval;
        let selectedFile = null;
        let currentEditingPreset = null;
        let currentGrid = 1;
        
        // G-code –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        let gcodeHistory = [];
        let maxHistoryItems = 50;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        document.addEventListener('DOMContentLoaded', function() {
            setupEventListeners();
            loadFileList();
            updateGridButtons();
            monitorPlasmaState();
        });
        
        function setupEventListeners() {
            // –°–ª–∞–π–¥–µ—Ä—ã THC
            document.getElementById('voltageSlider').addEventListener('input', function(e) {
                document.getElementById('voltageValue').textContent = e.target.value;
                document.getElementById('voltageDisplay').textContent = e.target.value + ' V';
            });
            
            document.getElementById('deadZoneSlider').addEventListener('input', function(e) {
                document.getElementById('deadZoneValue').textContent = e.target.value;
                document.getElementById('deadZoneDisplay').textContent = e.target.value + ' V';
            });
        }
        
        // WebSocket handlers
        ws.onopen = function() {
            console.log('WebSocket connected');
            updateConnectionStatus(true);
            clearInterval(reconnectInterval);
            sendCommand('get_file_list');
        };
        
        ws.onclose = function() {
            console.log('WebSocket disconnected');
            updateConnectionStatus(false);
            reconnectInterval = setInterval(() => {
                console.log('Attempting to reconnect...');
                ws = new WebSocket('ws://' + window.location.hostname + ':81/');
            }, 3000);
        };
        
        ws.onmessage = function(event) {
            try {
                const data = JSON.parse(event.data);
                updateUI(data);
            } catch (e) {
                console.error('Error parsing WebSocket message:', e);
            }
        };
        
        function updateUI(data) {
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            if (data.arcVoltage !== undefined) {
                document.getElementById('arcVoltage').textContent = data.arcVoltage.toFixed(1) + ' V';
            }
            if (data.currentHeight !== undefined) {
                document.getElementById('currentHeight').textContent = data.currentHeight.toFixed(2) + ' mm';
            }
            if (data.targetVoltage !== undefined) {
                document.getElementById('targetVoltage').textContent = data.targetVoltage + ' V';
            }
            if (data.arcOK !== undefined) {
                document.getElementById('arcStatus').textContent = data.arcOK ? '–î–ê' : '–ù–ï–¢';
                document.getElementById('arcStatus').style.color = data.arcOK ? '#4CAF50' : '#f44336';
            }
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            if (data.x !== undefined) document.getElementById('posX').textContent = data.x.toFixed(1);
            if (data.y !== undefined) document.getElementById('posY').textContent = data.y.toFixed(1);
            if (data.z !== undefined) document.getElementById('posZ').textContent = data.z.toFixed(1);
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤
            if (data.machineState !== undefined) document.getElementById('machineStatus').textContent = data.machineState;
            if (data.thcEnabled !== undefined) {
                document.getElementById('thcStatus').textContent = 'THC: ' + (data.thcEnabled ? '–í–∫–ª' : '–í—ã–∫–ª');
                const thcToggle = document.getElementById('thcToggle');
                thcToggle.textContent = data.thcEnabled ? 'THC –í—ã–∫–ª' : 'THC –í–∫–ª';
                thcToggle.className = data.thcEnabled ? 'btn btn-danger' : 'btn btn-success';
            }
            if (data.plasmaActive !== undefined) {
                document.getElementById('plasmaStatus').textContent = '–ü–ª–∞–∑–º–∞: ' + (data.plasmaActive ? '–í–∫–ª' : '–í—ã–∫–ª');
            }
            if (data.thcActive !== undefined) {
                document.getElementById('thcActiveStatus').textContent = data.thcActive ? 'THC: –ê–∫—Ç–∏–≤–Ω–æ' : 'THC: –ù–µ –∞–∫—Ç–∏–≤–Ω–æ';
                document.getElementById('thcActiveStatus').style.color = data.thcActive ? '#4CAF50' : '#f44336';
            }
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ SD –∫–∞—Ä—Ç—ã
            if (data.sdCardStatus !== undefined) {
                const sdStatus = document.getElementById('sdCardStatus');
                const sdStatusPanel = document.getElementById('sdCardStatusPanel');
                const statusText = data.sdCardStatus === 'mounted' ? '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞' : '‚ùå –û—à–∏–±–∫–∞';
                const statusColor = data.sdCardStatus === 'mounted' ? '#4CAF50' : '#f44336';
                
                sdStatus.textContent = 'SD Card: ' + statusText;
                sdStatus.style.color = statusColor;
                sdStatusPanel.textContent = 'SD Card: ' + statusText;
                sdStatusPanel.style.color = statusColor;
            }
            
            if (data.sdCardFiles !== undefined) {
                document.getElementById('fileCount').textContent = '–§–∞–π–ª–æ–≤: ' + data.sdCardFiles;
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ WebSocket
            if (data.type === 'file_list') {
                updateFileList(data);
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ G-code —Å–æ–æ–±—â–µ–Ω–∏–π
            if (data.type === 'gcode_response') {
                addToConsole(`<span style="color: #ffff00">>> ${data.command}</span>`, 'command');
                addToConsole(`${data.response}`, 'response');
            }
            
            if (data.type === 'gcode_state') {
                document.getElementById('gcodeStatus').textContent = `–°—Ç–∞—Ç—É—Å: ${data.state}`;
                document.getElementById('gcodeLine').textContent = `–°—Ç—Ä–æ–∫–∞: ${data.currentLine}`;
                document.getElementById('gcodeRunning').textContent = `–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: ${data.isRunning ? '‚úÖ' : '‚ùå'}`;
                document.getElementById('gcodeRunning').style.color = data.isRunning ? '#4CAF50' : '#f44336';
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                const startBtn = document.getElementById('startGCodeBtn');
                const pauseBtn = document.getElementById('pauseGCodeBtn');
                const resumeBtn = document.getElementById('resumeGCodeBtn');
                const stopBtn = document.getElementById('stopGCodeBtn');
                
                if (data.isRunning) {
                    pauseBtn.disabled = false;
                    resumeBtn.disabled = true;
                    stopBtn.disabled = false;
                } else {
                    pauseBtn.disabled = true;
                    resumeBtn.disabled = false;
                    stopBtn.disabled = false;
                }
                
                if (data.currentCommand) {
                    addToConsole(`–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: ${data.currentCommand}`, 'command');
                }
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ G-code
            if (data.type === 'gcode_progress') {
                document.getElementById('currentGCodeFile').textContent = data.filename || '-';
                document.getElementById('currentGCodePosition').textContent = data.currentLine + 1;
                document.getElementById('totalGCodeLines').textContent = data.totalLines;
                document.getElementById('gCodeExecutionState').textContent = 
                    data.isRunning ? (data.isPaused ? '–ü–∞—É–∑–∞' : '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ') : '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
                
                const progress = data.progress || 0;
                document.getElementById('progressPercent').textContent = `–ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress.toFixed(1)}%`;
                document.getElementById('progressBar').style.width = progress + '%';
                document.getElementById('retryCount').textContent = `–ü–æ–ø—ã—Ç–∫–∏: ${data.retryCount}/3`;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
                const simulateBtn = document.getElementById('simulateOutageBtn');
                const resumeBtn = document.getElementById('resumeRecoveryBtn');
                
                simulateBtn.disabled = !data.isRunning;
                resumeBtn.disabled = !data.isPaused;
            }
            
            if (data.type === 'gcode_state') {
                document.getElementById('recoveryStatus').textContent = 
                    data.state === 'PLASMA_OUTAGE' ? '–°–ë–û–ô –ü–õ–ê–ó–ú–´' :
                    data.state === 'RECOVERY' ? '–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï' :
                    data.state === 'RUNNING_FROM_LINE' ? '–ó–ê–ü–£–°–ö –° –°–¢–†–û–ö–ò' :
                    data.state;
            }
        }
        
        function updateFileList(data) {
            const fileList = document.getElementById('fileList');
            if (data.sdCardStatus === 'mounted' && Array.isArray(data)) {
                fileList.innerHTML = data.map(file => {
                    const safeFilename = file.replace(/'/g, "\\'").replace(/"/g, "\\\"");
                    return `<div class="file-item" onclick="selectFile('${safeFilename}')">üìÑ ${file}</div>`;
                }).join('');
                
                if (data.length === 0) {
                    fileList.innerHTML = '<div style="color: #aaa; text-align: center;">–ù–µ—Ç —Ñ–∞–π–ª–æ–≤</div>';
                }
            } else {
                fileList.innerHTML = '<div style="color: #f44336; text-align: center;">–û—à–∏–±–∫–∞ SD –∫–∞—Ä—Ç—ã</div>';
            }
        }
        
        function updateConnectionStatus(connected) {
            const status = document.getElementById('connectionInfo');
            status.textContent = connected ? 'üü¢ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω - –°–∏—Å—Ç–µ–º–∞ –æ–Ω–ª–∞–π–Ω' : 'üî¥ WebSocket –æ—Ç–∫–ª—é—á–µ–Ω - –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';
            status.style.background = connected ? '#4CAF50' : '#f44336';
        }
        
        // –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –û–°–Ø–ú–ò –ò –°–ï–¢–ö–ò
        function setGrid(gridSize) {
            currentGrid = gridSize;
            document.getElementById('currentGrid').textContent = gridSize;
            updateGridButtons();
        }
        
        function updateGridButtons() {
            const buttons = document.querySelectorAll('.grid-btn');
            buttons.forEach(btn => {
                const btnGrid = parseFloat(btn.textContent.replace('mm', ''));
                if (btnGrid === currentGrid) {
                    btn.classList.add('active');
                } else {
                    btn.classList.remove('active');
                }
            });
        }
        
        function jog(direction) {
            sendCommand('jog', { direction: direction, distance: currentGrid });
        }
        
        // –§—É–Ω–∫—Ü–∏–∏ –æ–±–Ω—É–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        function setZero(axis) {
            sendCommand('set_zero', { axis: axis });
            
            // –î—É–±–ª–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ HTTP –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            fetch('/api/set_zero?axis=' + axis, { method: 'POST' })
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'ok') {
                        console.log('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±–Ω—É–ª–µ–Ω—ã –¥–ª—è –æ—Å–∏: ' + axis);
                    }
                })
                .catch(error => {
                    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω—É–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:', error);
                });
        }
        
        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π
        function plasmaOn() {
            sendCommand('plasma_on');
        }
        
        function plasmaOff() {
            sendCommand('plasma_off');
        }
        
        function toggleTHC() {
            sendCommand('toggle_thc');
        }
        
        function homeAll() {
            sendCommand('home_all');
        }
        
        function emergencyStop() {
            if(confirm('!!! –í–ù–ò–ú–ê–ù–ò–ï !!!\n\n–ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?')) {
                sendCommand('emergency_stop');
            }
        }
        
        function saveTHCSettings() {
            const settings = {
                voltage: parseInt(document.getElementById('voltageSlider').value),
                deadZone: parseInt(document.getElementById('deadZoneSlider').value)
            };
            sendCommand('thc_settings', settings);
            alert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ THC —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
        }
        
        // G-code —Ñ—É–Ω–∫—Ü–∏–∏
        function sendGCode(command) {
            document.getElementById('gcodeInput').value = command;
            sendManualGCode();
        }

        function sendManualGCode() {
            const gcodeInput = document.getElementById('gcodeInput');
            const command = gcodeInput.value.trim();
            
            if (!command) {
                alert('–í–≤–µ–¥–∏—Ç–µ G-code –∫–æ–º–∞–Ω–¥—É');
                return;
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            addToHistory(command, 'pending');
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ WebSocket
            sendCommand('send_gcode', { gcode: command });
            
            // –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ HTTP –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            fetch('/api/gcode?command=' + encodeURIComponent(command), {
                method: 'POST'
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'ok') {
                    updateHistoryItem(command, 'success');
                }
            })
            .catch(error => {
                console.error('G-code error:', error);
                updateHistoryItem(command, 'error');
            });
            
            gcodeInput.value = '';
            gcodeInput.focus();
        }

        function handleGCodeKeypress(event) {
            if (event.key === 'Enter') {
                sendManualGCode();
            }
        }

        function addToHistory(command, status) {
            const timestamp = new Date().toLocaleTimeString();
            const historyItem = {
                command: command,
                status: status,
                timestamp: timestamp
            };
            
            gcodeHistory.unshift(historyItem);
            if (gcodeHistory.length > maxHistoryItems) {
                gcodeHistory.pop();
            }
            
            updateHistoryDisplay();
        }

        function updateHistoryItem(command, status) {
            const item = gcodeHistory.find(item => item.command === command && item.status === 'pending');
            if (item) {
                item.status = status;
                updateHistoryDisplay();
            }
        }

        function updateHistoryDisplay() {
            const historyElement = document.getElementById('gcodeHistory');
            historyElement.innerHTML = gcodeHistory.map(item => {
                const statusClass = item.status === 'success' ? 'success' : 
                                   item.status === 'error' ? 'error' : 'pending';
                return `<div class="${statusClass}">
                    <strong>${item.timestamp}</strong>: ${item.command}
                    ${item.status === 'success' ? '‚úÖ' : 
                      item.status === 'error' ? '‚ùå' : '‚è≥'}
                </div>`;
            }).join('');
        }

        function addToConsole(message, type = 'response') {
            const consoleElement = document.getElementById('gcodeConsole');
            const timestamp = new Date().toLocaleTimeString();
            const messageElement = document.createElement('div');
            messageElement.className = type;
            messageElement.innerHTML = `<span style="color: #888">[${timestamp}]</span> ${message}`;
            
            consoleElement.appendChild(messageElement);
            consoleElement.scrollTop = consoleElement.scrollHeight;
        }

        function clearConsole() {
            document.getElementById('gcodeConsole').innerHTML = '<div>> G-code –∫–æ–Ω—Å–æ–ª—å –æ—á–∏—â–µ–Ω–∞</div>';
        }

        function startGCode() {
            const filename = selectedFile;
            if (!filename) {
                alert('–í—ã–±–µ—Ä–∏—Ç–µ G-code —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞');
                return;
            }
            sendCommand('start_gcode_file', { filename: filename });
            addToConsole(`‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ —Ñ–∞–π–ª–∞: ${filename}`, 'command');
        }

        function pauseGCode() {
            sendCommand('pause_gcode');
            addToConsole('‚è∏Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'warning');
        }

        function resumeGCode() {
            sendCommand('resume_gcode');
            addToConsole('üîÅ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', 'command');
        }

        function stopGCode() {
            if (confirm('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ G-code?')) {
                sendCommand('stop_gcode');
                addToConsole('‚èπÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'error');
            }
        }

        // Recovery —Ñ—É–Ω–∫—Ü–∏–∏
        function startFromLine() {
            const filename = selectedFile;
            const startLine = parseInt(document.getElementById('startLineInput').value) - 1;
            
            if (!filename) {
                alert('–í—ã–±–µ—Ä–∏—Ç–µ G-code —Ñ–∞–π–ª');
                return;
            }
            
            if (isNaN(startLine) || startLine < 0) {
                alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏');
                return;
            }
            
            sendCommand('start_gcode_from_line', { 
                filename: filename, 
                startLine: startLine 
            });
            
            addToRecoveryLog(`üöÄ –ó–∞–ø—É—Å–∫ —Å —Å—Ç—Ä–æ–∫–∏ ${startLine + 1}`, 'info');
        }

        function jumpBackLines(lines) {
            const currentLine = parseInt(document.getElementById('currentGCodePosition').textContent) || 1;
            const newLine = Math.max(1, currentLine - lines);
            document.getElementById('startLineInput').value = newLine;
            addToRecoveryLog(`‚Ü©Ô∏è –û—Ç–∫–∞—Ç –Ω–∞ ${lines} —Å—Ç—Ä–æ–∫ –¥–æ ${newLine}`, 'warning');
        }

        function jumpToCurrentLine() {
            const currentLine = parseInt(document.getElementById('currentGCodePosition').textContent) || 1;
            document.getElementById('startLineInput').value = currentLine;
        }

        function simulatePlasmaOutage() {
            if (confirm('–°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–±–æ–π –ø–ª–∞–∑–º—ã? –≠—Ç–æ –≤—ã–∑–æ–≤–µ—Ç –∞–≤–∞—Ä–∏–π–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É.')) {
                sendCommand('handle_plasma_outage');
                addToRecoveryLog('‚ö° –°–ò–ú–£–õ–Ø–¶–ò–Ø –°–ë–û–Ø –ü–õ–ê–ó–ú–´', 'error');
            }
        }

        function resumeAfterRecovery() {
            sendCommand('resume_after_recovery');
            addToRecoveryLog('üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è', 'info');
        }

        function addToRecoveryLog(message, type = 'info') {
            const logElement = document.getElementById('recoveryLog');
            const timestamp = new Date().toLocaleTimeString();
            const messageElement = document.createElement('div');
            messageElement.className = type;
            messageElement.innerHTML = `<span style="color: #888">[${timestamp}]</span> ${message}`;
            
            logElement.appendChild(messageElement);
            logElement.scrollTop = logElement.scrollHeight;
        }

        function clearRecoveryLog() {
            document.getElementById('recoveryLog').innerHTML = '<div style="color: #00ff00;">> –õ–æ–≥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—á–∏—â–µ–Ω</div>';
        }

        // –§–£–ù–ö–¶–ò–ò –†–ï–î–ê–ö–¢–û–†–ê –ü–†–ï–°–ï–¢–û–í
        function loadPreset() {
            const presetSelect = document.getElementById('materialPreset');
            const presetName = presetSelect.value;
            
            if (!presetName) {
                alert('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ—Å–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞');
                return;
            }
            
            sendCommand('load_preset', { presetName: presetName });
            
            const presetData = getPresetData(presetName);
            updatePresetInfo(presetData);
        }
        
        function deletePreset() {
            const presetSelect = document.getElementById('materialPreset');
            const presetName = presetSelect.value;
            
            if (!presetName) {
                alert('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ—Å–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
                return;
            }
            
            if (confirm(`–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ—Å–µ—Ç "${presetName}"?`)) {
                sendCommand('delete_preset', { presetName: presetName });
                presetSelect.value = '';
                document.getElementById('presetInfo').innerHTML = '–ü—Ä–µ—Å–µ—Ç —É–¥–∞–ª–µ–Ω';
            }
        }
        
        function openPresetEditor() {
            const presetSelect = document.getElementById('materialPreset');
            const presetName = presetSelect.value;
            
            if (!presetName) {
                alert('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ—Å–µ—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
                return;
            }
            
            currentEditingPreset = presetName;
            const presetData = getPresetData(presetName);
            
            document.getElementById('editPresetName').value = presetName;
            document.getElementById('editPresetVoltage').value = presetData.voltage;
            document.getElementById('editPresetDeadZone').value = presetData.deadZone;
            document.getElementById('editPresetSpeed').value = presetData.speed;
            document.getElementById('editPresetPierceHeight').value = presetData.pierceHeight;
            document.getElementById('editPresetCutHeight').value = presetData.cutHeight;
            document.getElementById('editPresetPierceDelay').value = presetData.pierceDelay;
            
            document.getElementById('presetEditorModal').style.display = 'block';
        }
        
        function openNewPresetDialog() {
            currentEditingPreset = null;
            
            document.getElementById('editPresetName').value = '';
            document.getElementById('editPresetVoltage').value = 140;
            document.getElementById('editPresetDeadZone').value = 5;
            document.getElementById('editPresetSpeed').value = 2000;
            document.getElementById('editPresetPierceHeight').value = 5.0;
            document.getElementById('editPresetCutHeight').value = 3.0;
            document.getElementById('editPresetPierceDelay').value = 0.5;
            
            document.getElementById('presetEditorModal').style.display = 'block';
        }
        
        function closePresetEditor() {
            document.getElementById('presetEditorModal').style.display = 'none';
        }
        
        function savePreset() {
            const presetData = {
                name: document.getElementById('editPresetName').value,
                voltage: parseFloat(document.getElementById('editPresetVoltage').value),
                deadZone: parseFloat(document.getElementById('editPresetDeadZone').value),
                speed: parseFloat(document.getElementById('editPresetSpeed').value),
                pierceHeight: parseFloat(document.getElementById('editPresetPierceHeight').value),
                cutHeight: parseFloat(document.getElementById('editPresetCutHeight').value),
                pierceDelay: parseFloat(document.getElementById('editPresetPierceDelay').value)
            };
            
            if (!presetData.name) {
                alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞');
                return;
            }
            
            if (currentEditingPreset) {
                sendCommand('update_preset', { 
                    oldName: currentEditingPreset,
                    newData: presetData 
                });
            } else {
                sendCommand('create_preset', presetData);
            }
            
            closePresetEditor();
            alert('–ü—Ä–µ—Å–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ' + presetData.name);
        }
        
        function updatePresetInfo(presetData) {
            document.getElementById('presetVoltage').textContent = presetData.voltage;
            document.getElementById('presetSpeed').textContent = presetData.speed;
            document.getElementById('presetPierceHeight').textContent = presetData.pierceHeight;
            document.getElementById('presetCutHeight').textContent = presetData.cutHeight;
        }
        
        function getPresetData(presetName) {
            const presets = {
                'Steel 3mm': { voltage: 125, deadZone: 5, speed: 2500, pierceHeight: 5.0, cutHeight: 3.0, pierceDelay: 0.5 },
                'Steel 6mm': { voltage: 135, deadZone: 6, speed: 1800, pierceHeight: 6.0, cutHeight: 4.0, pierceDelay: 0.8 },
                'Steel 10mm': { voltage: 145, deadZone: 8, speed: 1200, pierceHeight: 8.0, cutHeight: 5.0, pierceDelay: 1.2 },
                'Aluminum 3mm': { voltage: 115, deadZone: 4, speed: 2000, pierceHeight: 4.0, cutHeight: 2.5, pierceDelay: 0.3 },
                'Stainless 3mm': { voltage: 130, deadZone: 4, speed: 2200, pierceHeight: 4.0, cutHeight: 2.8, pierceDelay: 0.4 }
            };
            return presets[presetName] || { voltage: '-', deadZone: '-', speed: '-', pierceHeight: '-', cutHeight: '-', pierceDelay: '-' };
        }

        // –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏
        function loadFileList() {
            fetch('/api/files/list')
                .then(response => response.json())
                .then(data => {
                    if (data.error) {
                        document.getElementById('fileList').innerHTML = '<div style="color: #f44336;">–û—à–∏–±–∫–∞: ' + data.error + '</div>';
                        return;
                    }
                    updateFileList(data);
                })
                .catch(error => {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤:', error);
                    document.getElementById('fileList').innerHTML = '<div style="color: #f44336;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</div>';
                });
        }

        function selectFile(filename) {
            selectedFile = filename;
            document.getElementById('selectedFileInfo').innerHTML = `üìÑ –í—ã–±—Ä–∞–Ω: <strong>${filename}</strong>`;
            
            const items = document.querySelectorAll('.file-item');
            items.forEach(item => {
                item.style.background = item.textContent.includes(filename) ? '#444' : 'transparent';
            });
        }

        function uploadFile() {
            const fileInput = document.getElementById('fileInput');
            const file = fileInput.files[0];
            
            if (!file) {
                alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
                return;
            }
            
            const formData = new FormData();
            formData.append('file', file);
            
            fetch('/api/files/upload', {
                method: 'POST',
                body: formData
            })
            .then(response => response.text())
            .then(result => {
                alert('‚úÖ ' + result);
                loadFileList();
                fileInput.value = '';
            })
            .catch(error => {
                alert('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + error);
            });
        }

        function runSelectedFile() {
            if (!selectedFile) {
                alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞');
                return;
            }
            
            if(confirm(`–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª: ${selectedFile}?`)) {
                fetch('/api/files/run?filename=' + encodeURIComponent(selectedFile), {
                    method: 'POST'
                })
                .then(response => response.text())
                .then(result => {
                    alert('‚ñ∂Ô∏è ' + result);
                })
                .catch(error => {
                    alert('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ' + error);
                });
            }
        }

        function deleteSelectedFile() {
            if (!selectedFile) {
                alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
                return;
            }
            
            if(confirm(`–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: ${selectedFile}?`)) {
                fetch('/api/files/delete?filename=' + encodeURIComponent(selectedFile), {
                    method: 'POST'
                })
                .then(response => response.text())
                .then(result => {
                    alert('üóëÔ∏è ' + result);
                    selectedFile = null;
                    loadFileList();
                    document.getElementById('selectedFileInfo').innerHTML = '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è';
                })
                .catch(error => {
                    alert('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ' + error);
                });
            }
        }

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–ª–∞–∑–º—ã
        function monitorPlasmaState() {
            setInterval(() => {
                // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–ª–∞–∑–º—ã
                // –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –¥—É–≥–∏ —É–ø–∞–ª–æ –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞
                if (false) { // –ó–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
                    sendCommand('handle_plasma_outage');
                }
            }, 1000);
        }

        // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        function sendCommand(command, data = {}) {
            const message = { command, ...data };
            if(ws.readyState === WebSocket.OPEN) {
                ws.send(JSON.stringify(message));
            } else {
                alert('WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.');
            }
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
        window.onclick = function(event) {
            const modal = document.getElementById('presetEditorModal');
            if (event.target == modal) {
                closePresetEditor();
            }
        }
    </script>
</body>
</html>
)rawliteral";
}
