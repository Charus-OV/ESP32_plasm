/*
 * –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –ü–†–ï–°–ï–¢–û–í - MaterialPresets.cpp
 * –ó–¥–µ—Å—å —Ö—Ä–∞–Ω—è—Ç—Å—è –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
 */

#include "MaterialPresets.h"
#include "THC_System.h"
#include <vector>

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤
std::vector<MaterialPreset> MaterialPresets::presets;

/*
 * –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –ü–†–ï–°–ï–¢–û–í
 * –ó–∞–ø–æ–ª–Ω—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
 */
void MaterialPresets::init() {
    Serial.println("üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–µ—Å–µ—Ç–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...");
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–µ—Å–µ—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
    presets.clear();
    
    // –î–û–ë–ê–í–õ–Ø–ï–ú –ü–†–ï–°–ï–¢–´ –î–õ–Ø –†–ê–ó–ù–´–• –ú–ê–¢–ï–†–ò–ê–õ–û–í –ò –¢–û–õ–©–ò–ù:
    
    // === –°–¢–ê–õ–¨ –ù–ò–ó–ö–û–£–ì–õ–ï–†–û–î–ò–°–¢–ê–Ø ===
    presets.push_back({"–°—Ç–∞–ª—å 1–º–º", 85, 4700, 2.2, 2.0, 0.5, 1.0});
    presets.push_back({"–°—Ç–∞–ª—å 2–º–º", 90, 4200, 2.3, 2.0, 0.6, 1.1});
    presets.push_back({"–°—Ç–∞–ª—å 3–º–º", 95, 3800, 2.5, 2.0, 0.7, 1.2});
    presets.push_back({"–°—Ç–∞–ª—å 5–º–º", 105, 3200, 2.8, 2.0, 0.9, 1.3});
    presets.push_back({"–°—Ç–∞–ª—å 6–º–º", 115, 2800, 3.0, 2.0, 1.0, 1.4});
    presets.push_back({"–°—Ç–∞–ª—å 8–º–º", 125, 2200, 3.5, 2.0, 1.2, 1.5});
    presets.push_back({"–°—Ç–∞–ª—å 10–º–º", 135, 1800, 3.8, 2.0, 1.4, 1.6});
    presets.push_back({"–°—Ç–∞–ª—å 12–º–º", 140, 1500, 4.0, 2.0, 1.5, 1.7});
    presets.push_back({"–°—Ç–∞–ª—å 15–º–º", 150, 1200, 4.5, 2.0, 1.8, 1.8});
    presets.push_back({"–°—Ç–∞–ª—å 20–º–º", 160, 900, 5.0, 2.0, 2.0, 2.0});
    
    // === –ù–ï–†–ñ–ê–í–ï–Æ–©–ê–Ø –°–¢–ê–õ–¨ ===
    presets.push_back({"–ù–µ—Ä–∂–∞–≤–µ–π–∫–∞ 2–º–º", 100, 3500, 2.5, 2.2, 0.8, 1.2});
    presets.push_back({"–ù–µ—Ä–∂–∞–≤–µ–π–∫–∞ 4–º–º", 115, 2800, 3.0, 2.2, 1.0, 1.4});
    presets.push_back({"–ù–µ—Ä–∂–∞–≤–µ–π–∫–∞ 6–º–º", 130, 2200, 3.5, 2.2, 1.2, 1.6});
    
    // === –ê–õ–Æ–ú–ò–ù–ò–ô ===
    presets.push_back({"–ê–ª—é–º–∏–Ω–∏–π 2–º–º", 95, 4000, 3.0, 2.5, 0.7, 1.3});
    presets.push_back({"–ê–ª—é–º–∏–Ω–∏–π 4–º–º", 110, 3200, 3.5, 2.5, 0.9, 1.5});
    presets.push_back({"–ê–ª—é–º–∏–Ω–∏–π 6–º–º", 125, 2500, 4.0, 2.5, 1.1, 1.7});
    presets.push_back({"–ê–ª—é–º–∏–Ω–∏–π 10–º–º", 140, 1800, 5.0, 2.5, 1.5, 2.0});
    
    // === –ú–ï–î–¨ ===
    presets.push_back({"–ú–µ–¥—å 3–º–º", 120, 3000, 3.5, 2.8, 1.0, 1.6});
    presets.push_back({"–ú–µ–¥—å 6–º–º", 140, 2000, 4.5, 2.8, 1.4, 1.9});
    
    Serial.println("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–µ—Å–µ—Ç–æ–≤: " + String(presets.size()));
    
    // –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤
    for(const auto& preset : presets) {
        Serial.println("   üìã " + preset.name + " - " + 
                      String(preset.speed) + " –º–º/–º–∏–Ω, " + 
                      String(preset.voltage) + "V");
    }
}

/*
 * –ü–û–õ–£–ß–ò–¢–¨ –ü–†–ï–°–ï–¢ –ü–û –ò–ú–ï–ù–ò
 * –ò—â–µ—Ç –ø—Ä–µ—Å–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–æ—á–Ω–æ–º—É –∏–º–µ–Ω–∏
 */
MaterialPreset MaterialPresets::getPreset(const String& name) {
    // –ò—â–µ–º –ø—Ä–µ—Å–µ—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
    for(const auto& preset : presets) {
        if(preset.name == name) {
            return preset;  // –ù–∞—à–ª–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
        }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ—Å–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    Serial.println("‚ö†  –ü—Ä–µ—Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: " + name + ", –∏—Å–ø–æ–ª—å–∑—É—é –°—Ç–∞–ª—å 6–º–º");
    return {"–°—Ç–∞–ª—å 6–º–º", 115, 2800, 3.0, 2.0, 1.0, 1.4};
}

/*
 * –ü–û–õ–£–ß–ò–¢–¨ –í–°–ï –î–û–°–¢–£–ü–ù–´–ï –ü–†–ï–°–ï–¢–´
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ø–∏—é –≤—Å–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤
 */
std::vector<MaterialPreset> MaterialPresets::getAllPresets() {
    return presets;  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
}

/*
 * –ü–†–ò–ú–ï–ù–ò–¢–¨ –ù–ê–°–¢–†–û–ô–ö–ò –ü–†–ï–°–ï–¢–ê
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–µ—Å–µ—Ç–∞ –≤ THC —Å–∏—Å—Ç–µ–º—É
 */
void MaterialPresets::applyPreset(const String& name) {
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ—Å–µ—Ç–∞
    MaterialPreset preset = getPreset(name);
    
    Serial.println("üéØ –ü—Ä–∏–º–µ–Ω—è—é –ø—Ä–µ—Å–µ—Ç: " + preset.name);
    Serial.println("   ‚ö° –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ: " + String(preset.voltage) + "V");
    Serial.println("   üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: " + String(preset.speed) + " –º–º/–º–∏–Ω");
    Serial.println("   üìè –í—ã—Å–æ—Ç–∞ –ø—Ä–æ–±–∏–≤–∫–∏: " + String(preset.pierceHeight) + "–º–º");
    Serial.println("   üî™ –†–∞–±–æ—á–∞—è –≤—ã—Å–æ—Ç–∞: " + String(preset.cutHeight) + "–º–º");
    Serial.println("   ‚è±  –ó–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–±–∏–≤–∫–∏: " + String(preset.pierceDelay) + "—Å");
    
    // –ó–¥–µ—Å—å –±—É–¥–µ–º –ø—Ä–∏–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ THC —Å–∏—Å—Ç–µ–º–µ
    // THC_System::setTargetVoltage(preset.voltage);
    // THC_System::setCutHeight(preset.cutHeight);
    // –∏ —Ç.–¥.
}

/*
 * –ù–ê–ô–¢–ò –ü–û–î–•–û–î–Ø–©–ò–ô –ü–†–ï–°–ï–¢
 * –ò—â–µ—Ç –ø—Ä–µ—Å–µ—Ç –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É –∏ —Ç–æ–ª—â–∏–Ω–µ (—É–º–Ω—ã–π –ø–æ–∏—Å–∫)
 */
MaterialPreset MaterialPresets::findPreset(const String& material, float thickness) {
    String searchPattern = material + " " + String(thickness) + "–º–º";
    
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    for(const auto& preset : presets) {
        if(preset.name == searchPattern) {
            return preset;
        }
    }
    
    // –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, –∏—â–µ–º –±–ª–∏–∂–∞–π—à—É—é —Ç–æ–ª—â–∏–Ω—É
    MaterialPreset closestPreset = presets[0];  // –ü–µ—Ä–≤—ã–π –ø—Ä–µ—Å–µ—Ç –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π
    float minDifference = 1000.0f;  // –ë–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    
    for(const auto& preset : presets) {
        if(preset.name.startsWith(material)) {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—â–∏–Ω—É –∏–∑ –∏–º–µ–Ω–∏ –ø—Ä–µ—Å–µ—Ç–∞
            int mmPos = preset.name.indexOf("–º–º");
            if(mmPos != -1) {
                String thicknessStr = preset.name.substring(material.length() + 1, mmPos);
                float presetThickness = thicknessStr.toFloat();
                
                // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É —Ç–æ–ª—â–∏–Ω
                float difference = fabs(presetThickness - thickness);
                if(difference < minDifference) {
                    minDifference = difference;
                    closestPreset = preset;
                }
            }
        }
    }
    
    Serial.println("üîç –ù–∞–π–¥–µ–Ω –±–ª–∏–∂–∞–π—à–∏–π –ø—Ä–µ—Å–µ—Ç: " + closestPreset.name + 
                  " (—Ä–∞–∑–Ω–∏—Ü–∞: " + String(minDifference) + "–º–º)");
    return closestPreset;
}